{
  "name": "i18n",
  "description": "lightweight simple translation module with dynamic json storage",
  "version": "0.3.5",
  "homepage": "http://github.com/mashpie/i18n-node",
  "repository": {
    "type": "git",
    "url": "http://github.com/mashpie/i18n-node.git"
  },
  "author": {
    "name": "Marcus Spiegel",
    "email": "marcus.spiegel@gmail.com"
  },
  "main": "./index",
  "directories": {
    "lib": "."
  },
  "dependencies": {
    "sprintf": ">=0.1.1"
  },
  "devDependencies": {
    "expresso": ">=0.9.2",
    "vows": ">=0.6.2"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "test": "expresso test/*"
  },
  "readme": "# i18n\n\nLightweight simple translation module with dynamic json storage. \nUses common __('...') syntax in app and templates.\nStores language files in json files compatible to [webtranslateit](http://webtranslateit.com/) json format.\nAdds new strings on-the-fly when first used in your app.\nNo extra parsing needed.\n\n[![Build Status](https://secure.travis-ci.org/mashpie/i18n-node.png?branch=master)](http://travis-ci.org/mashpie/i18n-node)\n\n## Install\n\n\tnpm install i18n\n\t\n## Test \n\n\tnpm test\n\n## Load\nin your app.js\n\n\t// load modules\n\tvar express = require('express'),\n\t    i18n = require(\"i18n\");\n\t\nnow you are ready to use `i18n.__('Hello')`.\n\n## Configure\nuse configure to setup these:\n\n    i18n.configure({\n        // setup some locales - other locales default to en silently\n        locales:['en', 'de'],\n\n        // where to register __() and __n() to, might be \"global\" if you know what you are doing\n        register: global\n    });\n\n**CAREFULL:** as jade uses `__` as internal variable you need to register view helpers tweaked to your needs when used with jade.\n\n### tweak helpers \nconfigure i18n without register: global\n\n\ti18n.configure({\n\t    // setup some locales - other locales default to en silently\n\t    locales:['en', 'de'],\n\t});\n\nand register view helpers on your own\n\n\t// register helpers for use in templates\n\tapp.helpers({\n\t  __i: i18n.__,\n\t  __n: i18n.__n\n\t});\n\n### hook into express configure\n\nin an express app, you might use i18n.init to gather language settings of your visitors, ie:\n\n\t// Configuration\n\tapp.configure(function() {\n\n    \t[...]\n\n\t    // using 'accept-language' header to guess language settings\n\t    app.use(i18n.init);\n\t    app.use(app.router);\n\t    app.use(express.static(__dirname + '/public'));\n\t});\n\t\n## Use\n\nin your app\n\n\tvar greeting = __('Hello');\n\t\nin your template (depending on your template compiler)\n\t\n\t<%= __('Hello') %>\n\t\n\t${__('Hello')}\n\t\n### sprintf support\n\n\tvar greeting = __('Hello %s, how are you today?', 'Marcus');\n\t\nthis puts **Hello Marcus, how are you today?**. You might add endless arguments and even nest it.\n\n\tvar greeting = __('Hello %s, how are you today? How was your %s.', 'Marcus', __('weekend'));\n\t\nwhich puts **Hello Marcus, how are you today? How was your weekend.**\n\n### variable support\n\nyou might even use dynamic variables. They get added to the `en.js` file if not yet existing.\n\n\tvar greetings = ['Hi', 'Hello', 'Howdy'];        \n    for (var i=0; i < greetings.length; i++) {\n        console.log( __(greetings[i]) );\n    };\n\nwhich puts \n\n\tHi\n\tHello\n\tHowdy\n\n### plural support\n\ndifferent plural froms are supported as response to `count`:\n\n\tvar singular = __n('%s cat', '%s cats', 1);\n    var plural = __n('%s cat', '%s cats', 3);\n\nthis puts **1 cat** or **3 cats**\nand again these could get nested:\n\n\tvar singular = __n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 1, 'tree');\n\tvar plural = __n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 3, 'tree');\n\t\nputting **There is one monkey in the tree** or **There are 3 monkeys in the tree**\n\n## Storage\n\n### json file\n\nthe above will automatically generate a `en.js` by default inside `./locales/` which looks like\n\n\t{\n\t\t\"Hello\": \"Hello\",\n\t\t\"Hello %s, how are you today?\": \"Hello %s, how are you today?\",\n\t\t\"weekend\": \"weekend\",\n\t\t\"Hello %s, how are you today? How was your %s.\": \"Hello %s, how are you today? How was your %s.\",\n\t\t\"Hi\": \"Hi\",\n\t\t\"Howdy\": \"Howdy\",\n\t\t\"%s cat\": {\n\t\t\t\"one\": \"%s cat\",\n\t\t\t\"other\": \"%s cats\"\n\t\t},\n\t\t\"There is one monkey in the %%s\": {\n\t\t\t\"one\": \"There is one monkey in the %%s\",\n\t\t\t\"other\": \"There are %d monkeys in the %%s\"\n\t\t},\n\t\t\"tree\": \"tree\"\n\t}\n\nthat file can be edited or just uploaded to [webtranslateit](http://docs.webtranslateit.com/file_formats/) for any kind of collaborative translation workflow:\n\n\t{\n\t\t\"Hello\": \"Hallo\",\n\t\t\"Hello %s, how are you today?\": \"Hallo %s, wie geht es dir heute?\",\n\t\t\"weekend\": \"Wochenende\",\n\t\t\"Hello %s, how are you today? How was your %s.\": \"Hallo %s, wie geht es dir heute? Wie war dein %s.\",\n\t\t\"Hi\": \"Hi\",\n\t\t\"Howdy\": \"HallÃ¶chen\",\n\t\t\"%s cat\": {\n\t\t\t\"one\": \"%s Katze\",\n\t\t\t\"other\": \"%s Katzen\"\n\t\t},\n\t\t\"There is one monkey in the %%s\": {\n\t\t\t\"one\": \"Im %%s sitzt ein Affe\",\n\t\t\t\"other\": \"Im Baum sitzen %d Affen\"\n\t\t},\n\t\t\"tree\": \"Baum\"\n\t}\n\t\n## Changelog\n\n* 0.3.5: fixed some issues, prepared refactoring, prepared publishing to npm finally\n* 0.3.4: merged pull request #13 from Fuitad/master and updated README\n* 0.3.3: merged pull request from codders/master and modified for backward compatibility. Usage and tests pending\n* 0.3.2: merged pull request #7 from carlptr/master and added tests, modified fswrite to do sync writes\n* 0.3.0: added configure and init with express support (calling guessLanguage() via 'accept-language')\n* 0.2.0: added plurals\n* 0.1.0: added tests\n* 0.0.1: start ",
  "_id": "i18n@0.3.5",
  "dist": {
    "shasum": "271c51ac6274094ac94850f23ea152da74ec89a6"
  },
  "_from": "i18n"
}
