{"documentation.json":{"About this Documentation":"miscs.0","Stability Index":"miscs.0.miscs.0","JSON Output":"miscs.0.miscs.1"},"synopsis.json":{"Synopsis":"miscs.0"},"globals.json":{"global":"miscs.0.globals.0","process":"miscs.0.globals.1","console":"miscs.0.globals.2","Class: Buffer":"miscs.0.globals.3","clearInterval(t)":"miscs.0.globals.4","require()":"miscs.0.vars.0","require.resolve()":"miscs.0.vars.0.methods.0","`cache` {Object} ":"miscs.0.vars.0.properties.0","`extensions` {Array} ":"miscs.0.vars.0.properties.1","__filename":"miscs.0.vars.1","__dirname":"miscs.0.vars.2","module":"miscs.0.vars.3","exports":"miscs.0.vars.4","setInterval(cb, ms)":"miscs.0.methods.0","Global Objects":"miscs.0"},"timers.json":{"Timers":"modules.0","setTimeout(callback, delay, [arg], [...])":"modules.0.methods.0","clearTimeout(timeoutId)":"modules.0.methods.1","setInterval(callback, delay, [arg], [...])":"modules.0.methods.2","clearInterval(intervalId)":"modules.0.methods.3"},"stdio.json":{"console":"globals.0","console.log([data], [...])":"globals.0.methods.0","console.info([data], [...])":"globals.0.methods.1","console.error([data], [...])":"globals.0.methods.2","console.warn([data], [...])":"globals.0.methods.3","console.dir(obj)":"globals.0.methods.4","console.time(label)":"globals.0.methods.5","console.timeEnd(label)":"globals.0.methods.6","console.trace(label)":"globals.0.methods.7","console.assert(expression, [message])":"globals.0.methods.8"},"process.json":{"process":"globals.0","Event: 'exit'":"globals.0.events.0","Event: 'uncaughtException'":"globals.0.events.1","Signal Events":"globals.0.events.2","process.stdout":"globals.0.properties.0","process.stderr":"globals.0.properties.1","process.stdin":"globals.0.properties.2","process.argv":"globals.0.properties.3","process.execPath":"globals.0.properties.4","process.env":"globals.0.properties.5","process.version":"globals.0.properties.6","process.versions":"globals.0.properties.7","process.config":"globals.0.properties.8","process.pid":"globals.0.properties.9","process.title":"globals.0.properties.10","process.arch":"globals.0.properties.11","process.platform":"globals.0.properties.12","process.abort()":"globals.0.methods.0","process.chdir(directory)":"globals.0.methods.1","process.cwd()":"globals.0.methods.2","process.exit([code])":"globals.0.methods.3","process.getgid()":"globals.0.methods.4","process.setgid(id)":"globals.0.methods.5","process.getuid()":"globals.0.methods.6","process.setuid(id)":"globals.0.methods.7","process.kill(pid, [signal])":"globals.0.methods.8","process.memoryUsage()":"globals.0.methods.9","process.nextTick(callback)":"globals.0.methods.10","process.umask([mask])":"globals.0.methods.11","process.uptime()":"globals.0.methods.12","process.hrtime()":"globals.0.methods.13"},"events.json":{"Events":"modules.0","Class: events.EventEmitter":"modules.0.classes.0","emitter.addListener(event, listener)":"modules.0.classes.0.methods.0","emitter.on(event, listener)":"modules.0.classes.0.methods.1","emitter.once(event, listener)":"modules.0.classes.0.methods.2","emitter.removeListener(event, listener)":"modules.0.classes.0.methods.3","emitter.removeAllListeners([event])":"modules.0.classes.0.methods.4","emitter.setMaxListeners(n)":"modules.0.classes.0.methods.5","emitter.listeners(event)":"modules.0.classes.0.methods.6","emitter.emit(event, [arg1], [arg2], [...])":"modules.0.classes.0.methods.7","Event: 'newListener'":"modules.0.classes.0.events.0"},"util.json":{"util":"modules.0","util.format(format, [...])":"modules.0.methods.0","util.debug(string)":"modules.0.methods.1","util.error([...])":"modules.0.methods.2","util.puts([...])":"modules.0.methods.3","util.print([...])":"modules.0.methods.4","util.log(string)":"modules.0.methods.5","util.inspect(object, [showHidden], [depth], [colors])":"modules.0.methods.6","util.isArray(object)":"modules.0.methods.7","util.isRegExp(object)":"modules.0.methods.8","util.isDate(object)":"modules.0.methods.9","util.isError(object)":"modules.0.methods.10","util.pump(readableStream, writableStream, [callback])":"modules.0.methods.11","util.inherits(constructor, superConstructor)":"modules.0.methods.12"},"addons.json":{"Addons":"modules.0","Hello world":"modules.0.modules.0","Addon patterns":"modules.0.modules.1","Function arguments":"modules.0.modules.1.modules.0","Callbacks":"modules.0.modules.1.modules.1","Object factory":"modules.0.modules.1.modules.2","Function factory":"modules.0.modules.1.modules.3","Wrapping C++ objects":"modules.0.modules.1.modules.4","Factory of wrapped objects":"modules.0.modules.1.modules.5","Passing wrapped objects around":"modules.0.modules.1.modules.6"},"domain.json":{"Domain":"modules.0","Additions to Error objects":"modules.0.miscs.0","Implicit Binding":"modules.0.miscs.1","Explicit Binding":"modules.0.miscs.2","domain.create()":"modules.0.methods.0","return: {Domain} ":"modules.0.methods.0.signatures.0.return","Class: Domain":"modules.0.classes.0","domain.run(fn)":"modules.0.classes.0.methods.0","`fn` {Function} ":"modules.0.classes.0.methods.0.signatures.0.params.0","domain.add(emitter)":"modules.0.classes.0.methods.1","`emitter` {EventEmitter | Timer} emitter or timer to be added to the domain ":"modules.0.classes.0.methods.1.signatures.0.params.0","domain.remove(emitter)":"modules.0.classes.0.methods.2","`emitter` {EventEmitter | Timer} emitter or timer to be removed from the domain ":"modules.0.classes.0.methods.2.signatures.0.params.0","domain.bind(cb)":"modules.0.classes.0.methods.3","return: {Function} The bound function ":"modules.0.classes.0.methods.3.signatures.0.return","`cb` {Function} The callback function ":"modules.0.classes.0.methods.4.signatures.0.params.0","domain.intercept(cb)":"modules.0.classes.0.methods.4","return: {Function} The intercepted function ":"modules.0.classes.0.methods.4.signatures.0.return","domain.dispose()":"modules.0.classes.0.methods.5","`members` {Array} ":"modules.0.classes.0.properties.0"},"stream.json":{"Stream":"modules.0","Readable Stream":"modules.0.classes.0","Event: 'data'":"modules.0.classes.0.events.0","Event: 'end'":"modules.0.classes.0.events.1","Event: 'error'":"modules.0.classes.1.events.1","Event: 'close'":"modules.0.classes.1.events.2","stream.readable":"modules.0.classes.0.properties.0","stream.setEncoding([encoding])":"modules.0.classes.0.methods.0","stream.pause()":"modules.0.classes.0.methods.1","stream.resume()":"modules.0.classes.0.methods.2","stream.destroy()":"modules.0.classes.1.methods.5","stream.pipe(destination, [options])":"modules.0.classes.0.methods.4","Writable Stream":"modules.0.classes.1","Event: 'drain'":"modules.0.classes.1.events.0","Event: 'pipe'":"modules.0.classes.1.events.3","stream.writable":"modules.0.classes.1.properties.0","stream.write(string, [encoding], [fd])":"modules.0.classes.1.methods.0","stream.write(buffer)":"modules.0.classes.1.methods.1","stream.end()":"modules.0.classes.1.methods.2","stream.end(string, encoding)":"modules.0.classes.1.methods.3","stream.end(buffer)":"modules.0.classes.1.methods.4","stream.destroySoon()":"modules.0.classes.1.methods.6"},"tls.json":{"TLS (SSL)":"modules.0","Client-initiated renegotiation attack mitigation":"modules.0.miscs.0","NPN and SNI":"modules.0.miscs.1","tls.createServer(options, [secureConnectionListener])":"modules.0.methods.0","tls.connect(options, [secureConnectListener])":"modules.0.methods.1","tls.connect(port, [host], [options], [secureConnectListener])":"modules.0.methods.2","tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])":"modules.0.methods.3","Class: SecurePair":"modules.0.classes.0","Event: 'secure'":"modules.0.classes.0.events.0","Class: tls.Server":"modules.0.classes.1","Event: 'secureConnection'":"modules.0.classes.1.events.0","Event: 'clientError'":"modules.0.classes.1.events.1","server.listen(port, [host], [callback])":"modules.0.classes.1.methods.0","server.close()":"modules.0.classes.1.methods.1","server.address()":"modules.0.classes.1.methods.2","server.addContext(hostname, credentials)":"modules.0.classes.1.methods.3","server.maxConnections":"modules.0.classes.1.properties.0","server.connections":"modules.0.classes.1.properties.1","Class: tls.CleartextStream":"modules.0.classes.2","Event: 'secureConnect'":"modules.0.classes.2.events.0","cleartextStream.authorized":"modules.0.classes.2.properties.0","cleartextStream.authorizationError":"modules.0.classes.2.properties.1","cleartextStream.remoteAddress":"modules.0.classes.2.properties.2","cleartextStream.remotePort":"modules.0.classes.2.properties.3","cleartextStream.getPeerCertificate()":"modules.0.classes.2.methods.0","cleartextStream.getCipher()":"modules.0.classes.2.methods.1","cleartextStream.address()":"modules.0.classes.2.methods.2"},"string_decoder.json":{"StringDecoder":"modules.0","Class: StringDecoder":"modules.0.classes.0","StringDecoder.write(buffer)":"modules.0.classes.0.methods.0"},"crypto.json":{"Crypto":"modules.0","crypto.createCredentials(details)":"modules.0.methods.0","crypto.createHash(algorithm)":"modules.0.methods.1","crypto.createHmac(algorithm, key)":"modules.0.methods.2","crypto.createCipher(algorithm, password)":"modules.0.methods.3","crypto.createCipheriv(algorithm, key, iv)":"modules.0.methods.4","crypto.createDecipher(algorithm, password)":"modules.0.methods.5","crypto.createDecipheriv(algorithm, key, iv)":"modules.0.methods.6","crypto.createSign(algorithm)":"modules.0.methods.7","crypto.createVerify(algorithm)":"modules.0.methods.8","crypto.createDiffieHellman(prime_length)":"modules.0.methods.9","crypto.createDiffieHellman(prime, [encoding])":"modules.0.methods.10","crypto.getDiffieHellman(group_name)":"modules.0.methods.11","crypto.pbkdf2(password, salt, iterations, keylen, callback)":"modules.0.methods.12","crypto.randomBytes(size, [callback])":"modules.0.methods.13","Class: Hash":"modules.0.classes.0","hash.update(data, [input_encoding])":"modules.0.classes.0.methods.0","hash.digest([encoding])":"modules.0.classes.0.methods.1","Class: Hmac":"modules.0.classes.1","hmac.update(data)":"modules.0.classes.1.methods.0","hmac.digest([encoding])":"modules.0.classes.1.methods.1","Class: Cipher":"modules.0.classes.2","cipher.update(data, [input_encoding], [output_encoding])":"modules.0.classes.2.methods.0","cipher.final([output_encoding])":"modules.0.classes.2.methods.1","cipher.setAutoPadding(auto_padding=true)":"modules.0.classes.2.methods.2","Class: Decipher":"modules.0.classes.3","decipher.update(data, [input_encoding], [output_encoding])":"modules.0.classes.3.methods.0","decipher.final([output_encoding])":"modules.0.classes.3.methods.1","decipher.setAutoPadding(auto_padding=true)":"modules.0.classes.3.methods.2","Class: Signer":"modules.0.classes.4","signer.update(data)":"modules.0.classes.4.methods.0","signer.sign(private_key, [output_format])":"modules.0.classes.4.methods.1","Class: Verify":"modules.0.classes.5","verifier.update(data)":"modules.0.classes.5.methods.0","verifier.verify(object, signature, [signature_format])":"modules.0.classes.5.methods.1","Class: DiffieHellman":"modules.0.classes.6","diffieHellman.generateKeys([encoding])":"modules.0.classes.6.methods.0","diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])":"modules.0.classes.6.methods.1","diffieHellman.getPrime([encoding])":"modules.0.classes.6.methods.2","diffieHellman.getGenerator([encoding])":"modules.0.classes.6.methods.3","diffieHellman.getPublicKey([encoding])":"modules.0.classes.6.methods.4","diffieHellman.getPrivateKey([encoding])":"modules.0.classes.6.methods.5","diffieHellman.setPublicKey(public_key, [encoding])":"modules.0.classes.6.methods.6","diffieHellman.setPrivateKey(public_key, [encoding])":"modules.0.classes.6.methods.7"},"path.json":{"Path":"modules.0","path.normalize(p)":"modules.0.methods.0","path.join([path1], [path2], [...])":"modules.0.methods.1","path.resolve([from ...], to)":"modules.0.methods.2","path.relative(from, to)":"modules.0.methods.3","path.dirname(p)":"modules.0.methods.4","path.basename(p, [ext])":"modules.0.methods.5","path.extname(p)":"modules.0.methods.6","path.sep":"modules.0.properties.0"},"fs.json":{"File System":"modules.0","fs.rename(oldPath, newPath, [callback])":"modules.0.methods.0","fs.renameSync(oldPath, newPath)":"modules.0.methods.1","fs.truncate(fd, len, [callback])":"modules.0.methods.2","fs.truncateSync(fd, len)":"modules.0.methods.3","fs.chown(path, uid, gid, [callback])":"modules.0.methods.4","fs.chownSync(path, uid, gid)":"modules.0.methods.5","fs.fchown(fd, uid, gid, [callback])":"modules.0.methods.6","fs.fchownSync(fd, uid, gid)":"modules.0.methods.7","fs.lchown(path, uid, gid, [callback])":"modules.0.methods.8","fs.lchownSync(path, uid, gid)":"modules.0.methods.9","fs.chmod(path, mode, [callback])":"modules.0.methods.10","fs.chmodSync(path, mode)":"modules.0.methods.11","fs.fchmod(fd, mode, [callback])":"modules.0.methods.12","fs.fchmodSync(fd, mode)":"modules.0.methods.13","fs.lchmod(path, mode, [callback])":"modules.0.methods.14","fs.lchmodSync(path, mode)":"modules.0.methods.15","fs.stat(path, [callback])":"modules.0.methods.16","fs.lstat(path, [callback])":"modules.0.methods.17","fs.fstat(fd, [callback])":"modules.0.methods.18","fs.statSync(path)":"modules.0.methods.19","fs.lstatSync(path)":"modules.0.methods.20","fs.fstatSync(fd)":"modules.0.methods.21","fs.link(srcpath, dstpath, [callback])":"modules.0.methods.22","fs.linkSync(srcpath, dstpath)":"modules.0.methods.23","fs.symlink(destination, path, [type], [callback])":"modules.0.methods.24","fs.symlinkSync(destination, path, [type])":"modules.0.methods.25","fs.readlink(path, [callback])":"modules.0.methods.26","fs.readlinkSync(path)":"modules.0.methods.27","fs.realpath(path, [cache], callback)":"modules.0.methods.28","fs.realpathSync(path, [cache])":"modules.0.methods.29","fs.unlink(path, [callback])":"modules.0.methods.30","fs.unlinkSync(path)":"modules.0.methods.31","fs.rmdir(path, [callback])":"modules.0.methods.32","fs.rmdirSync(path)":"modules.0.methods.33","fs.mkdir(path, [mode], [callback])":"modules.0.methods.34","fs.mkdirSync(path, [mode])":"modules.0.methods.35","fs.readdir(path, [callback])":"modules.0.methods.36","fs.readdirSync(path)":"modules.0.methods.37","fs.close(fd, [callback])":"modules.0.methods.38","fs.closeSync(fd)":"modules.0.methods.39","fs.open(path, flags, [mode], [callback])":"modules.0.methods.40","fs.openSync(path, flags, [mode])":"modules.0.methods.41","fs.utimes(path, atime, mtime, [callback])":"modules.0.methods.42","fs.utimesSync(path, atime, mtime)":"modules.0.methods.43","fs.futimes(fd, atime, mtime, [callback])":"modules.0.methods.44","fs.futimesSync(fd, atime, mtime)":"modules.0.methods.45","fs.fsync(fd, [callback])":"modules.0.methods.46","fs.fsyncSync(fd)":"modules.0.methods.47","fs.write(fd, buffer, offset, length, position, [callback])":"modules.0.methods.48","fs.writeSync(fd, buffer, offset, length, position)":"modules.0.methods.49","fs.read(fd, buffer, offset, length, position, [callback])":"modules.0.methods.50","fs.readSync(fd, buffer, offset, length, position)":"modules.0.methods.51","fs.readFile(filename, [encoding], [callback])":"modules.0.methods.52","fs.readFileSync(filename, [encoding])":"modules.0.methods.53","fs.writeFile(filename, data, [encoding], [callback])":"modules.0.methods.54","fs.writeFileSync(filename, data, [encoding])":"modules.0.methods.55","fs.appendFile(filename, data, encoding='utf8', [callback])":"modules.0.methods.56","fs.appendFileSync(filename, data, encoding='utf8')":"modules.0.methods.57","fs.watchFile(filename, [options], listener)":"modules.0.methods.58","fs.unwatchFile(filename)":"modules.0.methods.59","fs.watch(filename, [options], [listener])":"modules.0.methods.60","Caveats":"modules.0.methods.60.miscs.0","Availability":"modules.0.methods.60.miscs.0.miscs.0","Filename Argument":"modules.0.methods.60.miscs.0.miscs.1","fs.exists(path, [callback])":"modules.0.methods.61","fs.existsSync(path)":"modules.0.methods.62","fs.createReadStream(path, [options])":"modules.0.methods.63","fs.createWriteStream(path, [options])":"modules.0.methods.64","Class: fs.Stats":"modules.0.classes.0","Class: fs.ReadStream":"modules.0.classes.1","Event: 'open'":"modules.0.properties.0.events.0","Class: fs.FSWatcher":"modules.0.classes.2","watcher.close()":"modules.0.classes.2.methods.0","Event: 'change'":"modules.0.classes.2.events.0","Event: 'error'":"modules.0.classes.2.events.1","fs.WriteStream":"modules.0.properties.0","file.bytesWritten":"modules.0.properties.0.properties.0"},"buffer.json":{"Buffer":"modules.0","Class: Buffer":"modules.0.classes.0","buf.write(string, [offset], [length], [encoding])":"modules.0.classes.0.methods.0","`string` String - data to be written to buffer ":"modules.0.classes.0.methods.0.signatures.0.params.0","`offset` Number, Optional, Default: 0 ":"modules.0.classes.0.methods.0.signatures.0.params.1","`length` Number, Optional, Default: `buffer.length - offset` ":"modules.0.classes.0.methods.0.signatures.0.params.2","`encoding` String, Optional, Default: 'utf8' ":"modules.0.classes.0.classMethods.1.signatures.0.params.1","buf.toString([encoding], [start], [end])":"modules.0.classes.0.methods.1","`start` Number, Optional, Default: 0 ":"modules.0.classes.0.methods.3.signatures.0.params.0","`end` Number, Optional, Default: `buffer.length` ":"modules.0.classes.0.methods.3.signatures.0.params.1","buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])":"modules.0.classes.0.methods.2","`targetBuffer` Buffer object - Buffer to copy into ":"modules.0.classes.0.methods.2.signatures.0.params.0","`targetStart` Number, Optional, Default: 0 ":"modules.0.classes.0.methods.2.signatures.0.params.1","`sourceStart` Number, Optional, Default: 0 ":"modules.0.classes.0.methods.2.signatures.0.params.2","`sourceEnd` Number, Optional, Default: `buffer.length` ":"modules.0.classes.0.methods.2.signatures.0.params.3","buf.slice([start], [end])":"modules.0.classes.0.methods.3","buf.readUInt8(offset, [noAssert])":"modules.0.classes.0.methods.4","Return: Number ":"modules.0.classes.0.classMethods.1.signatures.0.return","`offset` Number ":"modules.0.classes.0.methods.31.signatures.0.params.1","`noAssert` Boolean, Optional, Default: false ":"modules.0.classes.0.methods.31.signatures.0.params.2","buf.readUInt16LE(offset, [noAssert])":"modules.0.classes.0.methods.5","buf.readUInt16BE(offset, [noAssert])":"modules.0.classes.0.methods.6","buf.readUInt32LE(offset, [noAssert])":"modules.0.classes.0.methods.7","buf.readUInt32BE(offset, [noAssert])":"modules.0.classes.0.methods.8","buf.readInt8(offset, [noAssert])":"modules.0.classes.0.methods.9","buf.readInt16LE(offset, [noAssert])":"modules.0.classes.0.methods.10","buf.readInt16BE(offset, [noAssert])":"modules.0.classes.0.methods.11","buf.readInt32LE(offset, [noAssert])":"modules.0.classes.0.methods.12","buf.readInt32BE(offset, [noAssert])":"modules.0.classes.0.methods.13","buf.readFloatLE(offset, [noAssert])":"modules.0.classes.0.methods.14","buf.readFloatBE(offset, [noAssert])":"modules.0.classes.0.methods.15","buf.readDoubleLE(offset, [noAssert])":"modules.0.classes.0.methods.16","buf.readDoubleBE(offset, [noAssert])":"modules.0.classes.0.methods.17","buf.writeUInt8(value, offset, [noAssert])":"modules.0.classes.0.methods.18","`value` Number ":"modules.0.classes.0.methods.31.signatures.0.params.0","buf.writeUInt16LE(value, offset, [noAssert])":"modules.0.classes.0.methods.19","buf.writeUInt16BE(value, offset, [noAssert])":"modules.0.classes.0.methods.20","buf.writeUInt32LE(value, offset, [noAssert])":"modules.0.classes.0.methods.21","buf.writeUInt32BE(value, offset, [noAssert])":"modules.0.classes.0.methods.22","buf.writeInt8(value, offset, [noAssert])":"modules.0.classes.0.methods.23","buf.writeInt16LE(value, offset, [noAssert])":"modules.0.classes.0.methods.24","buf.writeInt16BE(value, offset, [noAssert])":"modules.0.classes.0.methods.25","buf.writeInt32LE(value, offset, [noAssert])":"modules.0.classes.0.methods.26","buf.writeInt32BE(value, offset, [noAssert])":"modules.0.classes.0.methods.27","buf.writeFloatLE(value, offset, [noAssert])":"modules.0.classes.0.methods.28","buf.writeFloatBE(value, offset, [noAssert])":"modules.0.classes.0.methods.29","buf.writeDoubleLE(value, offset, [noAssert])":"modules.0.classes.0.methods.30","buf.writeDoubleBE(value, offset, [noAssert])":"modules.0.classes.0.methods.31","buf.fill(value, [offset], [end])":"modules.0.classes.0.methods.32","`value` ":"modules.0.classes.0.methods.32.signatures.0.params.0","`offset` Number, Optional ":"modules.0.classes.0.methods.32.signatures.0.params.1","`end` Number, Optional ":"modules.0.classes.0.methods.32.signatures.0.params.2","buf[index]":"modules.0.classes.0.properties.0","`length` Number ":"modules.0.classes.0.properties.1","Class Method: Buffer.isBuffer(obj)":"modules.0.classes.0.classMethods.0","Return: Boolean ":"modules.0.classes.0.classMethods.0.signatures.0.return","`obj` Object ":"modules.0.classes.0.classMethods.0.signatures.0.params.0","Class Method: Buffer.byteLength(string, [encoding])":"modules.0.classes.0.classMethods.1","`string` String ":"modules.0.classes.0.classMethods.1.signatures.0.params.0","Class Method: Buffer.concat(list, [totalLength])":"modules.0.classes.0.classMethods.2","`list` {Array} List of Buffer objects to concat ":"modules.0.classes.0.classMethods.2.signatures.0.params.0","`totalLength` {Number} Total length of the buffers when concatenated ":"modules.0.classes.0.classMethods.2.signatures.0.params.1","`size` Number ":"modules.0.classes.0.signatures.0.params.0","`array` Array ":"modules.0.classes.0.signatures.2.params.0","`str` String - string to encode. ":"modules.0.classes.0.signatures.4.params.0","`encoding` String - encoding to use, Optional. ":"modules.0.classes.0.signatures.4.params.1","Class: SlowBuffer":"modules.0.classes.1","`INSPECT_MAX_BYTES` Number, Default: 50 ":"modules.0.properties.0"},"dgram.json":{"UDP / Datagram Sockets":"modules.0","dgram.createSocket(type, [callback])":"modules.0.methods.0","Returns: Socket object ":"modules.0.methods.0.signatures.0.return","`type` String. Either 'udp4' or 'udp6' ":"modules.0.methods.0.signatures.0.params.0","`callback` Function. Attached as a listener to `message` events. Optional ":"modules.0.methods.0.signatures.0.params.1","Class: Socket":"modules.0.classes.0","Event: 'message'":"modules.0.classes.0.events.0","Event: 'listening'":"modules.0.classes.0.events.1","Event: 'close'":"modules.0.classes.0.events.2","Event: 'error'":"modules.0.classes.0.events.3","dgram.send(buf, offset, length, port, address, [callback])":"modules.0.classes.0.methods.0","`buf` Buffer object.  Message to be sent ":"modules.0.classes.0.methods.0.signatures.0.params.0","`offset` Integer. Offset in the buffer where the message starts. ":"modules.0.classes.0.methods.0.signatures.0.params.1","`length` Integer. Number of bytes in the message. ":"modules.0.classes.0.methods.0.signatures.0.params.2","`port` Integer. destination port ":"modules.0.classes.0.methods.0.signatures.0.params.3","`address` String. destination IP ":"modules.0.classes.0.methods.0.signatures.0.params.4","`callback` Function. Callback when message is done being delivered. Optional. ":"modules.0.classes.0.methods.0.signatures.0.params.5","dgram.bind(port, [address])":"modules.0.classes.0.methods.1","`port` Integer ":"modules.0.classes.0.methods.1.signatures.0.params.0","`address` String, Optional ":"modules.0.classes.0.methods.1.signatures.0.params.1","dgram.close()":"modules.0.classes.0.methods.2","dgram.address()":"modules.0.classes.0.methods.3","dgram.setBroadcast(flag)":"modules.0.classes.0.methods.4","`flag` Boolean ":"modules.0.classes.0.methods.7.signatures.0.params.0","dgram.setTTL(ttl)":"modules.0.classes.0.methods.5","`ttl` Integer ":"modules.0.classes.0.methods.6.signatures.0.params.0","dgram.setMulticastTTL(ttl)":"modules.0.classes.0.methods.6","dgram.setMulticastLoopback(flag)":"modules.0.classes.0.methods.7","dgram.addMembership(multicastAddress, [multicastInterface])":"modules.0.classes.0.methods.8","`multicastAddress` String ":"modules.0.classes.0.methods.9.signatures.0.params.0","`multicastInterface` String, Optional ":"modules.0.classes.0.methods.9.signatures.0.params.1","dgram.dropMembership(multicastAddress, [multicastInterface])":"modules.0.classes.0.methods.9"},"net.json":{"net":"modules.0","net.createServer([options], [connectionListener])":"modules.0.methods.0","net.connect(options, [connectionListener])":"modules.0.methods.1","net.createConnection(options, [connectionListener])":"modules.0.methods.2","net.connect(port, [host], [connectListener])":"modules.0.methods.3","net.createConnection(port, [host], [connectListener])":"modules.0.methods.4","net.connect(path, [connectListener])":"modules.0.methods.5","net.createConnection(path, [connectListener])":"modules.0.methods.6","net.isIP(input)":"modules.0.methods.7","net.isIPv4(input)":"modules.0.methods.8","net.isIPv6(input)":"modules.0.methods.9","Class: net.Server":"modules.0.classes.0","server.listen(port, [host], [backlog], [listeningListener])":"modules.0.classes.0.methods.0","server.listen(path, [listeningListener])":"modules.0.classes.0.methods.1","server.listen(handle, [listeningListener])":"modules.0.classes.0.methods.2","`handle` {Object} ":"modules.0.classes.0.methods.2.signatures.0.params.0","`listeningListener` {Function} ":"modules.0.classes.0.methods.2.signatures.0.params.1","server.close([cb])":"modules.0.classes.0.methods.3","server.address()":"modules.0.classes.0.methods.4","server.maxConnections":"modules.0.classes.0.properties.0","server.connections":"modules.0.classes.0.properties.1","Event: 'listening'":"modules.0.classes.0.events.0","Event: 'connection'":"modules.0.classes.0.events.1","Event: 'close'":"modules.0.classes.1.events.6","Event: 'error'":"modules.0.classes.1.events.5","Class: net.Socket":"modules.0.classes.1","new net.Socket([options])":"modules.0.classes.1.methods.0","socket.connect(port, [host], [connectListener])":"modules.0.classes.1.methods.1","socket.connect(path, [connectListener])":"modules.0.classes.1.methods.2","socket.setEncoding([encoding])":"modules.0.classes.1.methods.3","socket.write(data, [encoding], [callback])":"modules.0.classes.1.methods.4","socket.end([data], [encoding])":"modules.0.classes.1.methods.5","socket.destroy()":"modules.0.classes.1.methods.6","socket.pause()":"modules.0.classes.1.methods.7","socket.resume()":"modules.0.classes.1.methods.8","socket.setTimeout(timeout, [callback])":"modules.0.classes.1.methods.9","socket.setNoDelay([noDelay])":"modules.0.classes.1.methods.10","socket.setKeepAlive([enable], [initialDelay])":"modules.0.classes.1.methods.11","socket.address()":"modules.0.classes.1.methods.12","socket.bufferSize":"modules.0.classes.1.properties.0","socket.remoteAddress":"modules.0.classes.1.properties.1","socket.remotePort":"modules.0.classes.1.properties.2","socket.bytesRead":"modules.0.classes.1.properties.3","socket.bytesWritten":"modules.0.classes.1.properties.4","Event: 'connect'":"modules.0.classes.1.events.0","Event: 'data'":"modules.0.classes.1.events.1","Event: 'end'":"modules.0.classes.1.events.2","Event: 'timeout'":"modules.0.classes.1.events.3","Event: 'drain'":"modules.0.classes.1.events.4"},"dns.json":{"DNS":"modules.0","dns.lookup(domain, [family], callback)":"modules.0.methods.0","dns.resolve(domain, [rrtype], callback)":"modules.0.methods.1","dns.resolve4(domain, callback)":"modules.0.methods.2","dns.resolve6(domain, callback)":"modules.0.methods.3","dns.resolveMx(domain, callback)":"modules.0.methods.4","dns.resolveTxt(domain, callback)":"modules.0.methods.5","dns.resolveSrv(domain, callback)":"modules.0.methods.6","dns.resolveNs(domain, callback)":"modules.0.methods.7","dns.resolveCname(domain, callback)":"modules.0.methods.8","dns.reverse(ip, callback)":"modules.0.methods.9","Error codes":"modules.0.modules.0"},"https.json":{"HTTPS":"modules.0","Class: https.Server":"modules.0.classes.0","Class: https.Agent":"modules.0.classes.1","https.createServer(options, [requestListener])":"modules.0.methods.0","https.request(options, callback)":"modules.0.methods.1","https.get(options, callback)":"modules.0.methods.2","https.globalAgent":"modules.0.properties.0"},"url.json":{"URL":"modules.0","url.parse(urlStr, [parseQueryString], [slashesDenoteHost])":"modules.0.methods.0","url.format(urlObj)":"modules.0.methods.1","url.resolve(from, to)":"modules.0.methods.2"},"querystring.json":{"Query String":"modules.0","querystring.stringify(obj, [sep], [eq])":"modules.0.methods.0","querystring.parse(str, [sep], [eq], [options])":"modules.0.methods.1","querystring.escape":"modules.0.properties.0","querystring.unescape":"modules.0.properties.1"},"punycode.json":{"punycode":"modules.0","punycode.decode(string)":"modules.0.methods.0","punycode.encode(string)":"modules.0.methods.1","punycode.toUnicode(domain)":"modules.0.methods.2","punycode.toASCII(domain)":"modules.0.methods.3","punycode.ucs2":"modules.0.properties.0","punycode.ucs2.decode(string)":"modules.0.properties.0.modules.0","punycode.ucs2.encode(codePoints)":"modules.0.properties.0.modules.1","punycode.version":"modules.0.properties.1"},"readline.json":{"Readline":"modules.0","readline.createInterface(options)":"modules.0.methods.0","Class: Interface":"modules.0.classes.0","rl.setPrompt(prompt, length)":"modules.0.classes.0.methods.0","rl.prompt([preserveCursor])":"modules.0.classes.0.methods.1","rl.question(query, callback)":"modules.0.classes.0.methods.2","rl.pause()":"modules.0.classes.0.methods.3","rl.resume()":"modules.0.classes.0.methods.4","rl.close()":"modules.0.classes.0.methods.5","rl.write(data, [key])":"modules.0.classes.0.methods.6","Events":"modules.0.modules.0","Event: 'line'":"modules.0.modules.0.events.0","Event: 'pause'":"modules.0.modules.0.events.1","Event: 'resume'":"modules.0.modules.0.events.2","Event: 'close'":"modules.0.modules.0.events.3","Event: 'SIGINT'":"modules.0.modules.0.events.4","Event: 'SIGTSTP'":"modules.0.modules.0.events.5","Event: 'SIGCONT'":"modules.0.modules.0.events.6"},"repl.json":{"REPL":"modules.0","repl.start(options)":"modules.0.methods.0","Event: 'exit'":"modules.0.methods.0.events.0","REPL Features":"modules.0.miscs.0"},"http.json":{"HTTP":"modules.0","`STATUS_CODES` {Object} ":"modules.0.properties.0","http.globalAgent":"modules.0.properties.1","http.ClientResponse":"modules.0.properties.2","Event: 'data'":"modules.0.classes.1.events.0","Event: 'end'":"modules.0.classes.1.events.1","Event: 'close'":"modules.0.classes.2.events.0","response.statusCode":"modules.0.classes.2.properties.0","response.httpVersion":"modules.0.properties.2.properties.1","response.headers":"modules.0.properties.2.properties.2","response.trailers":"modules.0.properties.2.properties.3","response.setEncoding([encoding])":"modules.0.properties.2.methods.0","response.pause()":"modules.0.properties.2.methods.1","response.resume()":"modules.0.properties.2.methods.2","http.createServer([requestListener])":"modules.0.methods.0","http.createClient([port], [host])":"modules.0.methods.1","http.request(options, callback)":"modules.0.methods.2","http.get(options, callback)":"modules.0.methods.3","Class: http.Server":"modules.0.classes.0","Event: 'request'":"modules.0.classes.0.events.0","Event: 'connection'":"modules.0.classes.0.events.1","Event: 'checkContinue'":"modules.0.classes.0.events.3","Event: 'connect'":"modules.0.classes.4.events.2","Event: 'upgrade'":"modules.0.classes.4.events.3","Event: 'clientError'":"modules.0.classes.0.events.6","server.listen(port, [hostname], [backlog], [callback])":"modules.0.classes.0.methods.0","server.listen(path, [callback])":"modules.0.classes.0.methods.1","server.listen(handle, [listeningListener])":"modules.0.classes.0.methods.2","`handle` {Object} ":"modules.0.classes.0.methods.2.signatures.0.params.0","`listeningListener` {Function} ":"modules.0.classes.0.methods.2.signatures.0.params.1","server.close([cb])":"modules.0.classes.0.methods.3","server.maxHeadersCount":"modules.0.classes.0.properties.0","Class: http.ServerRequest":"modules.0.classes.1","request.method":"modules.0.classes.1.properties.0","request.url":"modules.0.classes.1.properties.1","request.headers":"modules.0.classes.1.properties.2","request.trailers":"modules.0.classes.1.properties.3","request.httpVersion":"modules.0.classes.1.properties.4","request.connection":"modules.0.classes.1.properties.5","request.setEncoding([encoding])":"modules.0.classes.1.methods.0","request.pause()":"modules.0.classes.1.methods.1","request.resume()":"modules.0.classes.1.methods.2","Class: http.ServerResponse":"modules.0.classes.2","response.writeContinue()":"modules.0.classes.2.methods.0","response.writeHead(statusCode, [reasonPhrase], [headers])":"modules.0.classes.2.methods.1","response.setHeader(name, value)":"modules.0.classes.2.methods.2","response.getHeader(name)":"modules.0.classes.2.methods.3","response.removeHeader(name)":"modules.0.classes.2.methods.4","response.write(chunk, [encoding])":"modules.0.classes.2.methods.5","response.addTrailers(headers)":"modules.0.classes.2.methods.6","response.end([data], [encoding])":"modules.0.classes.2.methods.7","response.sendDate":"modules.0.classes.2.properties.1","Class: http.Agent":"modules.0.classes.3","agent.maxSockets":"modules.0.classes.3.properties.0","agent.sockets":"modules.0.classes.3.properties.1","agent.requests":"modules.0.classes.3.properties.2","Class: http.ClientRequest":"modules.0.classes.4","Event 'response'":"modules.0.classes.4.events.0","Event: 'socket'":"modules.0.classes.4.events.1","Event: 'continue'":"modules.0.classes.4.events.4","request.write(chunk, [encoding])":"modules.0.classes.4.methods.0","request.end([data], [encoding])":"modules.0.classes.4.methods.1","request.abort()":"modules.0.classes.4.methods.2","request.setTimeout(timeout, [callback])":"modules.0.classes.4.methods.3","request.setNoDelay([noDelay])":"modules.0.classes.4.methods.4","request.setSocketKeepAlive([enable], [initialDelay])":"modules.0.classes.4.methods.5"},"vm.json":{"Executing JavaScript":"modules.0","Caveats":"modules.0.modules.0","Sandboxes":"modules.0.modules.0.modules.0","Globals":"modules.0.modules.0.modules.1","vm.runInThisContext(code, [filename])":"modules.0.methods.0","vm.runInNewContext(code, [sandbox], [filename])":"modules.0.methods.1","vm.runInContext(code, context, [filename])":"modules.0.methods.2","vm.createContext([initSandbox])":"modules.0.methods.3","vm.createScript(code, [filename])":"modules.0.methods.4","Class: Script":"modules.0.classes.0","script.runInThisContext()":"modules.0.classes.0.methods.0","script.runInNewContext([sandbox])":"modules.0.classes.0.methods.1"},"child_process.json":{"Child Process":"modules.0","Class: ChildProcess":"modules.0.classes.0","Event:  'exit'":"modules.0.classes.0.events.0","Event: 'close'":"modules.0.classes.0.events.1","Event: 'disconnect'":"modules.0.classes.0.events.2","Event: 'message'":"modules.0.classes.0.events.3","`stdin` {Stream object} ":"modules.0.classes.0.properties.0","`stdout` {Stream object} ":"modules.0.classes.0.properties.1","`stderr` {Stream object} ":"modules.0.classes.0.properties.2","`pid` {Integer} ":"modules.0.classes.0.properties.3","child.kill([signal])":"modules.0.classes.0.methods.0","`signal` {String} ":"modules.0.classes.0.methods.0.signatures.0.params.0","child.send(message, [sendHandle])":"modules.0.classes.0.methods.1","`message` {Object} ":"modules.0.classes.0.methods.1.signatures.0.params.0","`sendHandle` {Handle object} ":"modules.0.classes.0.methods.1.signatures.0.params.1","child.disconnect()":"modules.0.classes.0.methods.2","child_process.spawn(command, [args], [options])":"modules.0.methods.0","return: {ChildProcess object} ":"modules.0.methods.0.signatures.0.return","`command` {String} The command to run ":"modules.0.methods.0.signatures.0.params.0","`args` {Array} List of string arguments ":"modules.0.methods.3.signatures.0.params.1","`options` {Object} ":"modules.0.methods.3.signatures.0.params.2","`cwd` {String} Current working directory of the child process ":"modules.0.methods.3.signatures.0.params.2.options.0","`stdio` {Array|String} Child's stdio configuration. (See below) ":"modules.0.methods.0.signatures.0.params.2.options.1","`customFds` {Array} **Deprecated** File descriptors for the child to use for stdio.  (See below) ":"modules.0.methods.0.signatures.0.params.2.options.2","`env` {Object} Environment key-value pairs ":"modules.0.methods.3.signatures.0.params.2.options.1","`detached` {Boolean} The child will be a process group leader.  (See below) ":"modules.0.methods.0.signatures.0.params.2.options.4","child_process.exec(command, [options], callback)":"modules.0.methods.1","Return: ChildProcess object ":"modules.0.methods.3.signatures.0.return","`command` {String} The command to run, with space-separated arguments ":"modules.0.methods.1.signatures.0.params.0","`stdio` {Array|String} Child's stdio configuration. (See above) ":"modules.0.methods.2.signatures.0.params.2.options.1","`customFds` {Array} **Deprecated** File descriptors for the child to use for stdio.  (See above) ":"modules.0.methods.2.signatures.0.params.2.options.2","`encoding` {String} (Default: 'utf8') ":"modules.0.methods.3.signatures.0.params.2.options.2","`timeout` {Number} (Default: 0) ":"modules.0.methods.3.signatures.0.params.2.options.3","`maxBuffer` {Number} (Default: 200*1024) ":"modules.0.methods.1.signatures.0.params.1.options.6","`killSignal` {String} (Default: 'SIGTERM') ":"modules.0.methods.2.signatures.0.params.2.options.7","`callback` {Function} called with the output when process terminates ":"modules.0.methods.2.signatures.0.params.3","`error` {Error} ":"modules.0.methods.2.signatures.0.params.3.options.0","`stdout` {Buffer} ":"modules.0.methods.2.signatures.0.params.3.options.1","`stderr` {Buffer} ":"modules.0.methods.2.signatures.0.params.3.options.2","child_process.execFile(file, args, options, callback)":"modules.0.methods.2","`file` {String} The filename of the program to run ":"modules.0.methods.2.signatures.0.params.0","`maxBuffer` {Number} (Default: 200\\*1024) ":"modules.0.methods.2.signatures.0.params.2.options.6","child\\_process.fork(modulePath, [args], [options])":"modules.0.methods.3","`modulePath` {String} The module to run in the child ":"modules.0.methods.3.signatures.0.params.0"},"modules.json":{"Modules":"modules.0","Cycles":"modules.0.miscs.0","Core Modules":"modules.0.miscs.1","File Modules":"modules.0.miscs.2","Loading from `node_modules` Folders":"modules.0.miscs.3","Folders as Modules":"modules.0.miscs.4","Caching":"modules.0.miscs.5","Module Caching Caveats":"modules.0.miscs.5.miscs.0","All Together...":"modules.0.miscs.6","Loading from the global folders":"modules.0.miscs.7","Accessing the main module":"modules.0.miscs.8","Addenda: Package Manager Tips":"modules.0.miscs.9","The `module` Object":"modules.0.vars.0","`exports` {Object} ":"modules.0.vars.0.properties.0","`id` {String} ":"modules.0.vars.0.methods.0.signatures.0.params.0","`filename` {String} ":"modules.0.vars.0.properties.2","`loaded` {Boolean} ":"modules.0.vars.0.properties.3","`parent` {Module Object} ":"modules.0.vars.0.properties.4","`children` {Array} ":"modules.0.vars.0.properties.5","module.require(id)":"modules.0.vars.0.methods.0","Return: {Object} `exports` from the resolved module ":"modules.0.vars.0.methods.0.signatures.0.return"},"assert.json":{"Assert":"modules.0","assert.fail(actual, expected, message, operator)":"modules.0.methods.0","assert(value, message), assert.ok(value, [message])":"modules.0.methods.1","assert.equal(actual, expected, [message])":"modules.0.methods.2","assert.notEqual(actual, expected, [message])":"modules.0.methods.3","assert.deepEqual(actual, expected, [message])":"modules.0.methods.4","assert.notDeepEqual(actual, expected, [message])":"modules.0.methods.5","assert.strictEqual(actual, expected, [message])":"modules.0.methods.6","assert.notStrictEqual(actual, expected, [message])":"modules.0.methods.7","assert.throws(block, [error], [message])":"modules.0.methods.8","assert.doesNotThrow(block, [error], [message])":"modules.0.methods.9","assert.ifError(value)":"modules.0.methods.10"},"tty.json":{"TTY":"modules.0","tty.isatty(fd)":"modules.0.methods.0","tty.setRawMode(mode)":"modules.0.methods.1","Class: ReadStream":"modules.0.classes.0","rs.isRaw":"modules.0.classes.0.properties.0","rs.setRawMode(mode)":"modules.0.classes.0.methods.0","Class WriteStream":"modules.0.modules.0","ws.columns":"modules.0.modules.0.properties.0","ws.rows":"modules.0.modules.0.properties.1","Event: 'resize'":"modules.0.modules.0.events.0"},"zlib.json":{"Zlib":"modules.0","zlib.createGzip([options])":"modules.0.methods.0","zlib.createGunzip([options])":"modules.0.methods.1","zlib.createDeflate([options])":"modules.0.methods.2","zlib.createInflate([options])":"modules.0.methods.3","zlib.createDeflateRaw([options])":"modules.0.methods.4","zlib.createInflateRaw([options])":"modules.0.methods.5","zlib.createUnzip([options])":"modules.0.methods.6","zlib.deflate(buf, callback)":"modules.0.methods.7","zlib.deflateRaw(buf, callback)":"modules.0.methods.8","zlib.gzip(buf, callback)":"modules.0.methods.9","zlib.gunzip(buf, callback)":"modules.0.methods.10","zlib.inflate(buf, callback)":"modules.0.methods.11","zlib.inflateRaw(buf, callback)":"modules.0.methods.12","zlib.unzip(buf, callback)":"modules.0.methods.13","Class: zlib.Gzip":"modules.0.classes.0","Class: zlib.Gunzip":"modules.0.classes.1","Class: zlib.Deflate":"modules.0.classes.2","Class: zlib.Inflate":"modules.0.classes.3","Class: zlib.DeflateRaw":"modules.0.classes.4","Class: zlib.InflateRaw":"modules.0.classes.5","Class: zlib.Unzip":"modules.0.classes.6","Convenience Methods":"modules.0.miscs.0","Options":"modules.0.miscs.1","Memory Usage Tuning":"modules.0.miscs.2","Constants":"modules.0.miscs.3"},"cluster.json":{"Cluster":"modules.0","How It Works":"modules.0.miscs.0","`settings` {Object} ":"modules.0.methods.0.signatures.0.params.0","`exec` {String} file path to worker file.  (Default=`__filename`) ":"modules.0.methods.0.signatures.0.params.0.options.0","`args` {Array} string arguments passed to worker. (Default=`process.argv.slice(2)`) ":"modules.0.methods.0.signatures.0.params.0.options.1","`silent` {Boolean} whether or not to send output to parent's stdio. (Default=`false`) ":"modules.0.methods.0.signatures.0.params.0.options.2","`isMaster` {Boolean} ":"modules.0.properties.1","`isWorker` {Boolean} ":"modules.0.properties.2","`exec` {String} file path to worker file.  Default: `__filename` ":"modules.0.properties.3.options.0","`workers` {Object} ":"modules.0.properties.4","Event: 'fork'":"modules.0.events.0","Event: 'online'":"modules.0.classes.0.events.1","Event: 'listening'":"modules.0.classes.0.events.2","Event: 'disconnect'":"modules.0.classes.0.events.3","Event: 'exit'":"modules.0.classes.0.events.4","Event: 'setup'":"modules.0.events.5","cluster.setupMaster([settings])":"modules.0.methods.0","cluster.fork([env])":"modules.0.methods.1","return {Worker object} ":"modules.0.methods.1.signatures.0.return","`env` {Object} Key/value pairs to add to child process environment. ":"modules.0.methods.1.signatures.0.params.0","cluster.disconnect([callback])":"modules.0.methods.2","`callback` {Function} called when all workers are disconnected and handlers are closed ":"modules.0.methods.2.signatures.0.params.0","Class: Worker":"modules.0.classes.0","`id` {String} ":"modules.0.classes.0.properties.0","`process` {ChildProcess object} ":"modules.0.classes.0.properties.1","`suicide` {Boolean} ":"modules.0.classes.0.properties.2","worker.send(message, [sendHandle])":"modules.0.classes.0.methods.0","`message` {Object} ":"modules.0.classes.0.methods.0.signatures.0.params.0","`sendHandle` {Handle object} ":"modules.0.classes.0.methods.0.signatures.0.params.1","worker.destroy()":"modules.0.classes.0.methods.1","worker.disconnect()":"modules.0.classes.0.methods.2","Event: 'message'":"modules.0.classes.0.events.0"},"appendix_1.json":{"Appendix 1 - Third Party Modules":"modules.0"},"debugger.json":{"Debugger":"miscs.0","Watchers":"miscs.0.miscs.0","Commands reference":"miscs.0.miscs.1","Execution control":"miscs.0.miscs.1.modules.0","Various":"miscs.0.miscs.1.modules.1","Advanced Usage":"miscs.0.miscs.2"},"os.json":{"os":"modules.0","os.tmpDir()":"modules.0.methods.0","os.hostname()":"modules.0.methods.1","os.type()":"modules.0.methods.2","os.platform()":"modules.0.methods.3","os.arch()":"modules.0.methods.4","os.release()":"modules.0.methods.5","os.uptime()":"modules.0.methods.6","os.loadavg()":"modules.0.methods.7","os.totalmem()":"modules.0.methods.8","os.freemem()":"modules.0.methods.9","os.cpus()":"modules.0.methods.10","os.networkInterfaces()":"modules.0.methods.11","os.EOL":"modules.0.properties.0"}}
