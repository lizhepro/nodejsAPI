{"documentation.json":{"About this Documentation":{"path":"miscs.0","type":"misc"},"Stability Index":{"path":"miscs.0.miscs.0","type":"misc"},"JSON Output":{"path":"miscs.0.miscs.1","type":"misc"}},"synopsis.json":{"Synopsis":{"path":"miscs.0","type":"misc"}},"assert.json":{"Assert":{"path":"modules.0","type":"module"},"assert.fail(actual, expected, message, operator)":{"path":"modules.0.methods.0","type":"method"},"assert(value, message), assert.ok(value, [message])":{"path":"modules.0.methods.1","type":"method"},"assert.equal(actual, expected, [message])":{"path":"modules.0.methods.2","type":"method"},"assert.notEqual(actual, expected, [message])":{"path":"modules.0.methods.3","type":"method"},"assert.deepEqual(actual, expected, [message])":{"path":"modules.0.methods.4","type":"method"},"assert.notDeepEqual(actual, expected, [message])":{"path":"modules.0.methods.5","type":"method"},"assert.strictEqual(actual, expected, [message])":{"path":"modules.0.methods.6","type":"method"},"assert.notStrictEqual(actual, expected, [message])":{"path":"modules.0.methods.7","type":"method"},"assert.throws(block, [error], [message])":{"path":"modules.0.methods.8","type":"method"},"assert.doesNotThrow(block, [message])":{"path":"modules.0.methods.9","type":"method"},"assert.ifError(value)":{"path":"modules.0.methods.10","type":"method"}},"cluster.json":{"Cluster":{"path":"modules.0","type":"module"},"How It Works":{"path":"modules.0.miscs.0","type":"misc"},"`settings` {Object} ":{"path":"modules.0.methods.0.signatures.0.params.0","type":"Object"},"`exec` {String} file path to worker file.  (Default=`__filename`) ":{"path":"modules.0.methods.0.signatures.0.params.0.options.0","type":"String"},"`args` {Array} string arguments passed to worker. (Default=`process.argv.slice(2)`) ":{"path":"modules.0.methods.0.signatures.0.params.0.options.1","type":"Array"},"`silent` {Boolean} whether or not to send output to parent's stdio. (Default=`false`) ":{"path":"modules.0.methods.0.signatures.0.params.0.options.2","type":"Boolean"},"`isMaster` {Boolean} ":{"path":"modules.0.properties.1"},"`isWorker` {Boolean} ":{"path":"modules.0.properties.2"},"`worker` {Object} ":{"path":"modules.0.properties.3"},"`workers` {Object} ":{"path":"modules.0.properties.4"},"Event: 'fork'":{"path":"modules.0.events.0","type":"event"},"Event: 'online'":{"path":"modules.0.classes.0.events.1","type":"event"},"Event: 'listening'":{"path":"modules.0.classes.0.events.2","type":"event"},"Event: 'disconnect'":{"path":"modules.0.classes.0.events.3","type":"event"},"Event: 'exit'":{"path":"modules.0.classes.0.events.4","type":"event"},"Event: 'setup'":{"path":"modules.0.events.5","type":"event"},"cluster.setupMaster([settings])":{"path":"modules.0.methods.0","type":"method"},"cluster.fork([env])":{"path":"modules.0.methods.1","type":"method"},"return {Worker object} ":{"path":"modules.0.methods.1.signatures.0.return","type":"Worker object"},"`env` {Object} Key/value pairs to add to child process environment. ":{"path":"modules.0.methods.1.signatures.0.params.0","type":"Object"},"cluster.disconnect([callback])":{"path":"modules.0.methods.2","type":"method"},"`callback` {Function} called when all workers are disconnected and handlers are closed ":{"path":"modules.0.methods.2.signatures.0.params.0","type":"Function"},"Class: Worker":{"path":"modules.0.classes.0","type":"class"},"`id` {String} ":{"path":"modules.0.classes.0.properties.0"},"`process` {ChildProcess object} ":{"path":"modules.0.classes.0.properties.1"},"`suicide` {Boolean} ":{"path":"modules.0.classes.0.properties.2"},"worker.send(message, [sendHandle])":{"path":"modules.0.classes.0.methods.0","type":"method"},"`message` {Object} ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.0","type":"Object"},"`sendHandle` {Handle object} ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.1","type":"Handle object"},"worker.kill([signal='SIGTERM'])":{"path":"modules.0.classes.0.methods.1","type":"method"},"`signal` {String} Name of the kill signal to send to the worker process. ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.0","type":"String"},"worker.disconnect()":{"path":"modules.0.classes.0.methods.2","type":"method"},"Event: 'message'":{"path":"modules.0.classes.0.events.0","type":"event"}},"addons.json":{"Addons":{"path":"modules.0","type":"module"},"Hello world":{"path":"modules.0.modules.0","type":"module"},"Addon patterns":{"path":"modules.0.modules.1","type":"module"},"Function arguments":{"path":"modules.0.modules.1.modules.0","type":"module"},"Callbacks":{"path":"modules.0.modules.1.modules.1","type":"module"},"Object factory":{"path":"modules.0.modules.1.modules.2","type":"module"},"Function factory":{"path":"modules.0.modules.1.modules.3","type":"module"},"Wrapping C++ objects":{"path":"modules.0.modules.1.modules.4","type":"module"},"Factory of wrapped objects":{"path":"modules.0.modules.1.modules.5","type":"module"},"Passing wrapped objects around":{"path":"modules.0.modules.1.modules.6","type":"module"}},"child_process.json":{"Child Process":{"path":"modules.0","type":"module"},"Class: ChildProcess":{"path":"modules.0.classes.0","type":"class"},"Event:  'error'":{"path":"modules.0.classes.0.events.0","type":"event"},"Event:  'exit'":{"path":"modules.0.classes.0.events.1","type":"event"},"Event: 'close'":{"path":"modules.0.classes.0.events.2","type":"event"},"Event: 'disconnect'":{"path":"modules.0.classes.0.events.3","type":"event"},"Event: 'message'":{"path":"modules.0.classes.0.events.4","type":"event"},"`stdin` {Stream object} ":{"path":"modules.0.classes.0.properties.0"},"`stdout` {Stream object} ":{"path":"modules.0.classes.0.properties.1"},"`stderr` {Stream object} ":{"path":"modules.0.classes.0.properties.2"},"`pid` {Integer} ":{"path":"modules.0.classes.0.properties.3"},"child.kill([signal])":{"path":"modules.0.classes.0.methods.0","type":"method"},"`signal` {String} ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.0","type":"String"},"child.send(message, [sendHandle])":{"path":"modules.0.classes.0.methods.1","type":"method"},"`message` {Object} ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.0","type":"Object"},"`sendHandle` {Handle object} ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.1","type":"Handle object"},"child.disconnect()":{"path":"modules.0.classes.0.methods.2","type":"method"},"child_process.spawn(command, [args], [options])":{"path":"modules.0.methods.0","type":"method"},"return: {ChildProcess object} ":{"path":"modules.0.methods.0.signatures.0.return","type":"ChildProcess object"},"`command` {String} The command to run ":{"path":"modules.0.methods.0.signatures.0.params.0","type":"String"},"`args` {Array} List of string arguments ":{"path":"modules.0.methods.3.signatures.0.params.1","type":"Array"},"`options` {Object} ":{"path":"modules.0.methods.3.signatures.0.params.2","type":"Object"},"`cwd` {String} Current working directory of the child process ":{"path":"modules.0.methods.3.signatures.0.params.2.options.0","type":"String"},"`stdio` {Array|String} Child's stdio configuration. (See below) ":{"path":"modules.0.methods.0.signatures.0.params.2.options.1","type":"Array|String"},"`customFds` {Array} **Deprecated** File descriptors for the child to use for stdio.  (See below) ":{"path":"modules.0.methods.0.signatures.0.params.2.options.2","type":"Array"},"`env` {Object} Environment key-value pairs ":{"path":"modules.0.methods.3.signatures.0.params.2.options.1","type":"Object"},"`detached` {Boolean} The child will be a process group leader.  (See below) ":{"path":"modules.0.methods.0.signatures.0.params.2.options.4","type":"Boolean"},"`uid` {Number} Sets the user identity of the process. (See setuid(2).) ":{"path":"modules.0.methods.0.signatures.0.params.2.options.5","type":"Number"},"`gid` {Number} Sets the group identity of the process. (See setgid(2).) ":{"path":"modules.0.methods.0.signatures.0.params.2.options.6","type":"Number"},"child_process.exec(command, [options], callback)":{"path":"modules.0.methods.1","type":"method"},"Return: ChildProcess object ":{"path":"modules.0.methods.3.signatures.0.return"},"`command` {String} The command to run, with space-separated arguments ":{"path":"modules.0.methods.1.signatures.0.params.0","type":"String"},"`encoding` {String} (Default: 'utf8') ":{"path":"modules.0.methods.3.signatures.0.params.2.options.2","type":"String"},"`timeout` {Number} (Default: 0) ":{"path":"modules.0.methods.2.signatures.0.params.2.options.3","type":"Number"},"`maxBuffer` {Number} (Default: 200*1024) ":{"path":"modules.0.methods.1.signatures.0.params.1.options.4","type":"Number"},"`killSignal` {String} (Default: 'SIGTERM') ":{"path":"modules.0.methods.2.signatures.0.params.2.options.5","type":"String"},"`callback` {Function} called with the output when process terminates ":{"path":"modules.0.methods.2.signatures.0.params.3","type":"Function"},"`error` {Error} ":{"path":"modules.0.methods.2.signatures.0.params.3.options.0","type":"Error"},"`stdout` {Buffer} ":{"path":"modules.0.methods.2.signatures.0.params.3.options.1","type":"Buffer"},"`stderr` {Buffer} ":{"path":"modules.0.methods.2.signatures.0.params.3.options.2","type":"Buffer"},"child_process.execFile(file, args, options, callback)":{"path":"modules.0.methods.2","type":"method"},"`file` {String} The filename of the program to run ":{"path":"modules.0.methods.2.signatures.0.params.0","type":"String"},"`maxBuffer` {Number} (Default: 200\\*1024) ":{"path":"modules.0.methods.2.signatures.0.params.2.options.4","type":"Number"},"child\\_process.fork(modulePath, [args], [options])":{"path":"modules.0.methods.3","type":"method"},"`modulePath` {String} The module to run in the child ":{"path":"modules.0.methods.3.signatures.0.params.0","type":"String"},"`execPath` {String} Executable used to create the child process ":{"path":"modules.0.methods.3.signatures.0.params.2.options.3","type":"String"}},"debugger.json":{"Debugger":{"path":"miscs.0","type":"misc"},"Watchers":{"path":"miscs.0.miscs.0","type":"misc"},"Commands reference":{"path":"miscs.0.miscs.1","type":"misc"},"Stepping":{"path":"miscs.0.miscs.1.modules.0","type":"module"},"Breakpoints":{"path":"miscs.0.miscs.1.modules.1","type":"module"},"Execution control":{"path":"miscs.0.miscs.1.modules.2","type":"module"},"Various":{"path":"miscs.0.miscs.1.modules.3","type":"module"},"Advanced Usage":{"path":"miscs.0.miscs.2","type":"misc"}},"dns.json":{"DNS":{"path":"modules.0","type":"module"},"dns.lookup(domain, [family], callback)":{"path":"modules.0.methods.0","type":"method"},"dns.resolve(domain, [rrtype], callback)":{"path":"modules.0.methods.1","type":"method"},"dns.resolve4(domain, callback)":{"path":"modules.0.methods.2","type":"method"},"dns.resolve6(domain, callback)":{"path":"modules.0.methods.3","type":"method"},"dns.resolveMx(domain, callback)":{"path":"modules.0.methods.4","type":"method"},"dns.resolveTxt(domain, callback)":{"path":"modules.0.methods.5","type":"method"},"dns.resolveSrv(domain, callback)":{"path":"modules.0.methods.6","type":"method"},"dns.resolveNs(domain, callback)":{"path":"modules.0.methods.7","type":"method"},"dns.resolveCname(domain, callback)":{"path":"modules.0.methods.8","type":"method"},"dns.reverse(ip, callback)":{"path":"modules.0.methods.9","type":"method"},"Error codes":{"path":"modules.0.modules.0","type":"module"}},"crypto.json":{"Crypto":{"path":"modules.0","type":"module"},"crypto.getCiphers()":{"path":"modules.0.methods.0","type":"method"},"crypto.getHashes()":{"path":"modules.0.methods.1","type":"method"},"crypto.createCredentials(details)":{"path":"modules.0.methods.2","type":"method"},"crypto.createHash(algorithm)":{"path":"modules.0.methods.3","type":"method"},"crypto.createHmac(algorithm, key)":{"path":"modules.0.methods.4","type":"method"},"crypto.createCipher(algorithm, password)":{"path":"modules.0.methods.5","type":"method"},"crypto.createCipheriv(algorithm, key, iv)":{"path":"modules.0.methods.6","type":"method"},"crypto.createDecipher(algorithm, password)":{"path":"modules.0.methods.7","type":"method"},"crypto.createDecipheriv(algorithm, key, iv)":{"path":"modules.0.methods.8","type":"method"},"crypto.createSign(algorithm)":{"path":"modules.0.methods.9","type":"method"},"crypto.createVerify(algorithm)":{"path":"modules.0.methods.10","type":"method"},"crypto.createDiffieHellman(prime_length)":{"path":"modules.0.methods.11","type":"method"},"crypto.createDiffieHellman(prime, [encoding])":{"path":"modules.0.methods.12","type":"method"},"crypto.getDiffieHellman(group_name)":{"path":"modules.0.methods.13","type":"method"},"crypto.pbkdf2(password, salt, iterations, keylen, callback)":{"path":"modules.0.methods.14","type":"method"},"crypto.pbkdf2Sync(password, salt, iterations, keylen)":{"path":"modules.0.methods.15","type":"method"},"crypto.randomBytes(size, [callback])":{"path":"modules.0.methods.16","type":"method"},"crypto.pseudoRandomBytes(size, [callback])":{"path":"modules.0.methods.17","type":"method"},"Class: Hash":{"path":"modules.0.classes.0","type":"class"},"hash.update(data, [input_encoding])":{"path":"modules.0.classes.0.methods.0","type":"method"},"hash.digest([encoding])":{"path":"modules.0.classes.0.methods.1","type":"method"},"Class: Hmac":{"path":"modules.0.classes.1","type":"class"},"hmac.update(data)":{"path":"modules.0.classes.1.methods.0","type":"method"},"hmac.digest([encoding])":{"path":"modules.0.classes.1.methods.1","type":"method"},"Class: Cipher":{"path":"modules.0.classes.2","type":"class"},"cipher.update(data, [input_encoding], [output_encoding])":{"path":"modules.0.classes.2.methods.0","type":"method"},"cipher.final([output_encoding])":{"path":"modules.0.classes.2.methods.1","type":"method"},"cipher.setAutoPadding(auto_padding=true)":{"path":"modules.0.classes.2.methods.2","type":"method"},"Class: Decipher":{"path":"modules.0.classes.3","type":"class"},"decipher.update(data, [input_encoding], [output_encoding])":{"path":"modules.0.classes.3.methods.0","type":"method"},"decipher.final([output_encoding])":{"path":"modules.0.classes.3.methods.1","type":"method"},"decipher.setAutoPadding(auto_padding=true)":{"path":"modules.0.classes.3.methods.2","type":"method"},"Class: Sign":{"path":"modules.0.classes.4","type":"class"},"sign.update(data)":{"path":"modules.0.classes.4.methods.0","type":"method"},"sign.sign(private_key, [output_format])":{"path":"modules.0.classes.4.methods.1","type":"method"},"Class: Verify":{"path":"modules.0.classes.5","type":"class"},"verifier.update(data)":{"path":"modules.0.classes.5.methods.0","type":"method"},"verifier.verify(object, signature, [signature_format])":{"path":"modules.0.classes.5.methods.1","type":"method"},"Class: DiffieHellman":{"path":"modules.0.classes.6","type":"class"},"diffieHellman.generateKeys([encoding])":{"path":"modules.0.classes.6.methods.0","type":"method"},"diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])":{"path":"modules.0.classes.6.methods.1","type":"method"},"diffieHellman.getPrime([encoding])":{"path":"modules.0.classes.6.methods.2","type":"method"},"diffieHellman.getGenerator([encoding])":{"path":"modules.0.classes.6.methods.3","type":"method"},"diffieHellman.getPublicKey([encoding])":{"path":"modules.0.classes.6.methods.4","type":"method"},"diffieHellman.getPrivateKey([encoding])":{"path":"modules.0.classes.6.methods.5","type":"method"},"diffieHellman.setPublicKey(public_key, [encoding])":{"path":"modules.0.classes.6.methods.6","type":"method"},"diffieHellman.setPrivateKey(private_key, [encoding])":{"path":"modules.0.classes.6.methods.7","type":"method"},"crypto.DEFAULT_ENCODING":{"path":"modules.0.properties.0"},"Recent API Changes":{"path":"modules.0.modules.0","type":"module"}},"domain.json":{"Domain":{"path":"modules.0","type":"module"},"Warning: Don't Ignore Errors!":{"path":"modules.0.miscs.0","type":"misc"},"Additions to Error objects":{"path":"modules.0.miscs.1","type":"misc"},"Implicit Binding":{"path":"modules.0.miscs.2","type":"misc"},"Explicit Binding":{"path":"modules.0.miscs.3","type":"misc"},"domain.create()":{"path":"modules.0.methods.0","type":"method"},"return: {Domain} ":{"path":"modules.0.methods.0.signatures.0.return","type":"Domain"},"Class: Domain":{"path":"modules.0.classes.0","type":"class"},"domain.run(fn)":{"path":"modules.0.classes.0.methods.0","type":"method"},"`fn` {Function} ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.0","type":"Function"},"domain.add(emitter)":{"path":"modules.0.classes.0.methods.1","type":"method"},"`emitter` {EventEmitter | Timer} emitter or timer to be added to the domain ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.0","type":"EventEmitter | Timer"},"domain.remove(emitter)":{"path":"modules.0.classes.0.methods.2","type":"method"},"`emitter` {EventEmitter | Timer} emitter or timer to be removed from the domain ":{"path":"modules.0.classes.0.methods.2.signatures.0.params.0","type":"EventEmitter | Timer"},"domain.bind(callback)":{"path":"modules.0.classes.0.methods.3","type":"method"},"return: {Function} The bound function ":{"path":"modules.0.classes.0.methods.3.signatures.0.return","type":"Function"},"`callback` {Function} The callback function ":{"path":"modules.0.classes.0.methods.4.signatures.0.params.0","type":"Function"},"domain.intercept(callback)":{"path":"modules.0.classes.0.methods.4","type":"method"},"return: {Function} The intercepted function ":{"path":"modules.0.classes.0.methods.4.signatures.0.return","type":"Function"},"domain.dispose()":{"path":"modules.0.classes.0.methods.5","type":"method"},"`members` {Array} ":{"path":"modules.0.classes.0.properties.0"}},"events.json":{"Events":{"path":"modules.0","type":"module"},"Class: events.EventEmitter":{"path":"modules.0.classes.0","type":"class"},"emitter.addListener(event, listener)":{"path":"modules.0.classes.0.methods.0","type":"method"},"emitter.on(event, listener)":{"path":"modules.0.classes.0.methods.1","type":"method"},"emitter.once(event, listener)":{"path":"modules.0.classes.0.methods.2","type":"method"},"emitter.removeListener(event, listener)":{"path":"modules.0.classes.0.methods.3","type":"method"},"emitter.removeAllListeners([event])":{"path":"modules.0.classes.0.methods.4","type":"method"},"emitter.setMaxListeners(n)":{"path":"modules.0.classes.0.methods.5","type":"method"},"emitter.listeners(event)":{"path":"modules.0.classes.0.methods.6","type":"method"},"emitter.emit(event, [arg1], [arg2], [...])":{"path":"modules.0.classes.0.methods.7","type":"method"},"Class Method: EventEmitter.listenerCount(emitter, event)":{"path":"modules.0.classes.0.classMethods.0","type":"classMethod"},"Event: 'newListener'":{"path":"modules.0.classes.0.events.0","type":"event"},"Event: 'removeListener'":{"path":"modules.0.classes.0.events.1","type":"event"}},"globals.json":{"global":{"path":"miscs.0.globals.0","type":"global"},"process":{"path":"miscs.0.globals.1","type":"global"},"console":{"path":"miscs.0.globals.2","type":"global"},"Class: Buffer":{"path":"miscs.0.globals.3","type":"global"},"clearInterval(t)":{"path":"miscs.0.globals.4","type":"global"},"require()":{"path":"miscs.0.vars.0","type":"var"},"require.resolve()":{"path":"miscs.0.vars.0.methods.0","type":"method"},"`cache` {Object} ":{"path":"miscs.0.vars.0.properties.0"},"`extensions` {Object} ":{"path":"miscs.0.vars.0.properties.1"},"__filename":{"path":"miscs.0.vars.1","type":"var"},"__dirname":{"path":"miscs.0.vars.2","type":"var"},"module":{"path":"miscs.0.vars.3","type":"var"},"exports":{"path":"miscs.0.vars.4","type":"var"},"setTimeout(cb, ms)":{"path":"miscs.0.methods.0","type":"method"},"clearTimeout(t)":{"path":"miscs.0.methods.1","type":"method"},"setInterval(cb, ms)":{"path":"miscs.0.methods.2","type":"method"},"Global Objects":{"path":"miscs.0","type":"misc"}},"buffer.json":{"Buffer":{"path":"modules.0","type":"module"},"Class: Buffer":{"path":"modules.0.classes.0","type":"class"},"Class Method: Buffer.isEncoding(encoding)":{"path":"modules.0.classes.0.classMethods.0","type":"classMethod"},"`encoding` {String} The encoding string to test ":{"path":"modules.0.classes.0.classMethods.0.signatures.0.params.0","type":"String"},"Class Method: Buffer.isBuffer(obj)":{"path":"modules.0.classes.0.classMethods.1","type":"classMethod"},"Return: Boolean ":{"path":"modules.0.classes.0.classMethods.1.signatures.0.return"},"`obj` Object ":{"path":"modules.0.classes.0.classMethods.1.signatures.0.params.0"},"Class Method: Buffer.byteLength(string, [encoding])":{"path":"modules.0.classes.0.classMethods.2","type":"classMethod"},"Return: Number ":{"path":"modules.0.classes.0.methods.18.signatures.0.return"},"`string` String ":{"path":"modules.0.classes.0.classMethods.2.signatures.0.params.0"},"`encoding` String, Optional, Default: 'utf8' ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.0"},"Class Method: Buffer.concat(list, [totalLength])":{"path":"modules.0.classes.0.classMethods.3","type":"classMethod"},"`list` {Array} List of Buffer objects to concat ":{"path":"modules.0.classes.0.classMethods.3.signatures.0.params.0","type":"Array"},"`totalLength` {Number} Total length of the buffers when concatenated ":{"path":"modules.0.classes.0.classMethods.3.signatures.0.params.1","type":"Number"},"buf.write(string, [offset], [length], [encoding])":{"path":"modules.0.classes.0.methods.0","type":"method"},"`string` String - data to be written to buffer ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.0"},"`offset` Number, Optional, Default: 0 ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.1"},"`length` Number, Optional, Default: `buffer.length - offset` ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.2"},"buf.toString([encoding], [start], [end])":{"path":"modules.0.classes.0.methods.1","type":"method"},"`start` Number, Optional, Default: 0 ":{"path":"modules.0.classes.0.methods.4.signatures.0.params.0"},"`end` Number, Optional, Default: `buffer.length` ":{"path":"modules.0.classes.0.methods.4.signatures.0.params.1"},"buf.toJSON()":{"path":"modules.0.classes.0.methods.2","type":"method"},"buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])":{"path":"modules.0.classes.0.methods.3","type":"method"},"`targetBuffer` Buffer object - Buffer to copy into ":{"path":"modules.0.classes.0.methods.3.signatures.0.params.0"},"`targetStart` Number, Optional, Default: 0 ":{"path":"modules.0.classes.0.methods.3.signatures.0.params.1"},"`sourceStart` Number, Optional, Default: 0 ":{"path":"modules.0.classes.0.methods.3.signatures.0.params.2"},"`sourceEnd` Number, Optional, Default: `buffer.length` ":{"path":"modules.0.classes.0.methods.3.signatures.0.params.3"},"buf.slice([start], [end])":{"path":"modules.0.classes.0.methods.4","type":"method"},"buf.readUInt8(offset, [noAssert])":{"path":"modules.0.classes.0.methods.5","type":"method"},"`offset` Number ":{"path":"modules.0.classes.0.methods.32.signatures.0.params.1"},"`noAssert` Boolean, Optional, Default: false ":{"path":"modules.0.classes.0.methods.32.signatures.0.params.2"},"buf.readUInt16LE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.6","type":"method"},"buf.readUInt16BE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.7","type":"method"},"buf.readUInt32LE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.8","type":"method"},"buf.readUInt32BE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.9","type":"method"},"buf.readInt8(offset, [noAssert])":{"path":"modules.0.classes.0.methods.10","type":"method"},"buf.readInt16LE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.11","type":"method"},"buf.readInt16BE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.12","type":"method"},"buf.readInt32LE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.13","type":"method"},"buf.readInt32BE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.14","type":"method"},"buf.readFloatLE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.15","type":"method"},"buf.readFloatBE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.16","type":"method"},"buf.readDoubleLE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.17","type":"method"},"buf.readDoubleBE(offset, [noAssert])":{"path":"modules.0.classes.0.methods.18","type":"method"},"buf.writeUInt8(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.19","type":"method"},"`value` Number ":{"path":"modules.0.classes.0.methods.32.signatures.0.params.0"},"buf.writeUInt16LE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.20","type":"method"},"buf.writeUInt16BE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.21","type":"method"},"buf.writeUInt32LE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.22","type":"method"},"buf.writeUInt32BE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.23","type":"method"},"buf.writeInt8(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.24","type":"method"},"buf.writeInt16LE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.25","type":"method"},"buf.writeInt16BE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.26","type":"method"},"buf.writeInt32LE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.27","type":"method"},"buf.writeInt32BE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.28","type":"method"},"buf.writeFloatLE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.29","type":"method"},"buf.writeFloatBE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.30","type":"method"},"buf.writeDoubleLE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.31","type":"method"},"buf.writeDoubleBE(value, offset, [noAssert])":{"path":"modules.0.classes.0.methods.32","type":"method"},"buf.fill(value, [offset], [end])":{"path":"modules.0.classes.0.methods.33","type":"method"},"`value` ":{"path":"modules.0.classes.0.methods.33.signatures.0.params.0"},"`offset` Number, Optional ":{"path":"modules.0.classes.0.methods.33.signatures.0.params.1"},"`end` Number, Optional ":{"path":"modules.0.classes.0.methods.33.signatures.0.params.2"},"buf[index]":{"path":"modules.0.classes.0.properties.0"},"`length` Number ":{"path":"modules.0.classes.0.properties.1"},"`size` Number ":{"path":"modules.0.classes.0.signatures.0.params.0"},"`array` Array ":{"path":"modules.0.classes.0.signatures.2.params.0"},"`str` String - string to encode. ":{"path":"modules.0.classes.0.signatures.4.params.0"},"`encoding` String - encoding to use, Optional. ":{"path":"modules.0.classes.0.signatures.4.params.1"},"Class: SlowBuffer":{"path":"modules.0.classes.1","type":"class"},"`INSPECT_MAX_BYTES` Number, Default: 50 ":{"path":"modules.0.properties.0"}},"fs.json":{"File System":{"path":"modules.0","type":"module"},"fs.rename(oldPath, newPath, callback)":{"path":"modules.0.methods.0","type":"method"},"fs.renameSync(oldPath, newPath)":{"path":"modules.0.methods.1","type":"method"},"fs.ftruncate(fd, len, callback)":{"path":"modules.0.methods.2","type":"method"},"fs.ftruncateSync(fd, len)":{"path":"modules.0.methods.3","type":"method"},"fs.truncate(path, len, callback)":{"path":"modules.0.methods.4","type":"method"},"fs.truncateSync(path, len)":{"path":"modules.0.methods.5","type":"method"},"fs.chown(path, uid, gid, callback)":{"path":"modules.0.methods.6","type":"method"},"fs.chownSync(path, uid, gid)":{"path":"modules.0.methods.7","type":"method"},"fs.fchown(fd, uid, gid, callback)":{"path":"modules.0.methods.8","type":"method"},"fs.fchownSync(fd, uid, gid)":{"path":"modules.0.methods.9","type":"method"},"fs.lchown(path, uid, gid, callback)":{"path":"modules.0.methods.10","type":"method"},"fs.lchownSync(path, uid, gid)":{"path":"modules.0.methods.11","type":"method"},"fs.chmod(path, mode, callback)":{"path":"modules.0.methods.12","type":"method"},"fs.chmodSync(path, mode)":{"path":"modules.0.methods.13","type":"method"},"fs.fchmod(fd, mode, callback)":{"path":"modules.0.methods.14","type":"method"},"fs.fchmodSync(fd, mode)":{"path":"modules.0.methods.15","type":"method"},"fs.lchmod(path, mode, callback)":{"path":"modules.0.methods.16","type":"method"},"fs.lchmodSync(path, mode)":{"path":"modules.0.methods.17","type":"method"},"fs.stat(path, callback)":{"path":"modules.0.methods.18","type":"method"},"fs.lstat(path, callback)":{"path":"modules.0.methods.19","type":"method"},"fs.fstat(fd, callback)":{"path":"modules.0.methods.20","type":"method"},"fs.statSync(path)":{"path":"modules.0.methods.21","type":"method"},"fs.lstatSync(path)":{"path":"modules.0.methods.22","type":"method"},"fs.fstatSync(fd)":{"path":"modules.0.methods.23","type":"method"},"fs.link(srcpath, dstpath, callback)":{"path":"modules.0.methods.24","type":"method"},"fs.linkSync(srcpath, dstpath)":{"path":"modules.0.methods.25","type":"method"},"fs.symlink(srcpath, dstpath, [type], callback)":{"path":"modules.0.methods.26","type":"method"},"fs.symlinkSync(srcpath, dstpath, [type])":{"path":"modules.0.methods.27","type":"method"},"fs.readlink(path, callback)":{"path":"modules.0.methods.28","type":"method"},"fs.readlinkSync(path)":{"path":"modules.0.methods.29","type":"method"},"fs.realpath(path, [cache], callback)":{"path":"modules.0.methods.30","type":"method"},"fs.realpathSync(path, [cache])":{"path":"modules.0.methods.31","type":"method"},"fs.unlink(path, callback)":{"path":"modules.0.methods.32","type":"method"},"fs.unlinkSync(path)":{"path":"modules.0.methods.33","type":"method"},"fs.rmdir(path, callback)":{"path":"modules.0.methods.34","type":"method"},"fs.rmdirSync(path)":{"path":"modules.0.methods.35","type":"method"},"fs.mkdir(path, [mode], callback)":{"path":"modules.0.methods.36","type":"method"},"fs.mkdirSync(path, [mode])":{"path":"modules.0.methods.37","type":"method"},"fs.readdir(path, callback)":{"path":"modules.0.methods.38","type":"method"},"fs.readdirSync(path)":{"path":"modules.0.methods.39","type":"method"},"fs.close(fd, callback)":{"path":"modules.0.methods.40","type":"method"},"fs.closeSync(fd)":{"path":"modules.0.methods.41","type":"method"},"fs.open(path, flags, [mode], callback)":{"path":"modules.0.methods.42","type":"method"},"fs.openSync(path, flags, [mode])":{"path":"modules.0.methods.43","type":"method"},"fs.utimes(path, atime, mtime, callback)":{"path":"modules.0.methods.44","type":"method"},"fs.utimesSync(path, atime, mtime)":{"path":"modules.0.methods.45","type":"method"},"fs.futimes(fd, atime, mtime, callback)":{"path":"modules.0.methods.46","type":"method"},"fs.futimesSync(fd, atime, mtime)":{"path":"modules.0.methods.47","type":"method"},"fs.fsync(fd, callback)":{"path":"modules.0.methods.48","type":"method"},"fs.fsyncSync(fd)":{"path":"modules.0.methods.49","type":"method"},"fs.write(fd, buffer, offset, length, position, callback)":{"path":"modules.0.methods.50","type":"method"},"fs.writeSync(fd, buffer, offset, length, position)":{"path":"modules.0.methods.51","type":"method"},"fs.read(fd, buffer, offset, length, position, callback)":{"path":"modules.0.methods.52","type":"method"},"fs.readSync(fd, buffer, offset, length, position)":{"path":"modules.0.methods.53","type":"method"},"fs.readFile(filename, [options], callback)":{"path":"modules.0.methods.54","type":"method"},"`filename` {String} ":{"path":"modules.0.methods.58.signatures.0.params.0","type":"String"},"`options` {Object} ":{"path":"modules.0.methods.58.signatures.0.params.2","type":"Object"},"`encoding` {String | Null} default = `null` ":{"path":"modules.0.methods.54.signatures.0.params.1.options.0","type":"String | Null"},"`flag` {String} default = `'r'` ":{"path":"modules.0.methods.54.signatures.0.params.1.options.1","type":"String"},"`callback` {Function} ":{"path":"modules.0.methods.58.signatures.0.params.3","type":"Function"},"fs.readFileSync(filename, [options])":{"path":"modules.0.methods.55","type":"method"},"fs.writeFile(filename, data, [options], callback)":{"path":"modules.0.methods.56","type":"method"},"`data` {String | Buffer} ":{"path":"modules.0.methods.58.signatures.0.params.1","type":"String | Buffer"},"`encoding` {String | Null} default = `'utf8'` ":{"path":"modules.0.methods.58.signatures.0.params.2.options.0","type":"String | Null"},"`mode` {Number} default = `438` (aka `0666` in Octal) ":{"path":"modules.0.methods.58.signatures.0.params.2.options.1","type":"Number"},"`flag` {String} default = `'w'` ":{"path":"modules.0.methods.56.signatures.0.params.2.options.2","type":"String"},"fs.writeFileSync(filename, data, [options])":{"path":"modules.0.methods.57","type":"method"},"fs.appendFile(filename, data, [options], callback)":{"path":"modules.0.methods.58","type":"method"},"`flag` {String} default = `'a'` ":{"path":"modules.0.methods.58.signatures.0.params.2.options.2","type":"String"},"fs.appendFileSync(filename, data, [options])":{"path":"modules.0.methods.59","type":"method"},"fs.watchFile(filename, [options], listener)":{"path":"modules.0.methods.60","type":"method"},"fs.unwatchFile(filename, [listener])":{"path":"modules.0.methods.61","type":"method"},"fs.watch(filename, [options], [listener])":{"path":"modules.0.methods.62","type":"method"},"Caveats":{"path":"modules.0.methods.62.miscs.0","type":"misc"},"Availability":{"path":"modules.0.methods.62.miscs.0.miscs.0","type":"misc"},"Filename Argument":{"path":"modules.0.methods.62.miscs.0.miscs.1","type":"misc"},"fs.exists(path, callback)":{"path":"modules.0.methods.63","type":"method"},"fs.existsSync(path)":{"path":"modules.0.methods.64","type":"method"},"fs.createReadStream(path, [options])":{"path":"modules.0.methods.65","type":"method"},"fs.createWriteStream(path, [options])":{"path":"modules.0.methods.66","type":"method"},"Class: fs.Stats":{"path":"modules.0.classes.0","type":"class"},"Class: fs.ReadStream":{"path":"modules.0.classes.1","type":"class"},"Event: 'open'":{"path":"modules.0.properties.0.events.0","type":"event"},"Class: fs.FSWatcher":{"path":"modules.0.classes.2","type":"class"},"watcher.close()":{"path":"modules.0.classes.2.methods.0","type":"method"},"Event: 'change'":{"path":"modules.0.classes.2.events.0","type":"event"},"Event: 'error'":{"path":"modules.0.classes.2.events.1","type":"event"},"fs.WriteStream":{"path":"modules.0.properties.0"},"file.bytesWritten":{"path":"modules.0.properties.0.properties.0"}},"https.json":{"HTTPS":{"path":"modules.0","type":"module"},"Class: https.Server":{"path":"modules.0.classes.0","type":"class"},"Class: https.Agent":{"path":"modules.0.classes.1","type":"class"},"https.createServer(options, [requestListener])":{"path":"modules.0.methods.0","type":"method"},"server.listen(path, [callback])":{"path":"modules.0.methods.0.methods.0","type":"method"},"server.listen(handle, [callback])":{"path":"modules.0.methods.0.methods.1","type":"method"},"server.close([callback])":{"path":"modules.0.methods.0.methods.2","type":"method"},"https.request(options, callback)":{"path":"modules.0.methods.1","type":"method"},"https.get(options, callback)":{"path":"modules.0.methods.2","type":"method"},"https.globalAgent":{"path":"modules.0.properties.0"}},"modules.json":{"Modules":{"path":"modules.0","type":"module"},"Cycles":{"path":"modules.0.miscs.0","type":"misc"},"Core Modules":{"path":"modules.0.miscs.1","type":"misc"},"File Modules":{"path":"modules.0.miscs.2","type":"misc"},"Loading from `node_modules` Folders":{"path":"modules.0.miscs.3","type":"misc"},"Folders as Modules":{"path":"modules.0.miscs.4","type":"misc"},"Caching":{"path":"modules.0.miscs.5","type":"misc"},"Module Caching Caveats":{"path":"modules.0.miscs.5.miscs.0","type":"misc"},"All Together...":{"path":"modules.0.miscs.6","type":"misc"},"Loading from the global folders":{"path":"modules.0.miscs.7","type":"misc"},"Accessing the main module":{"path":"modules.0.miscs.8","type":"misc"},"Addenda: Package Manager Tips":{"path":"modules.0.miscs.9","type":"misc"},"The `module` Object":{"path":"modules.0.vars.0","type":"var"},"`exports` {Object} ":{"path":"modules.0.vars.0.properties.0"},"`id` {String} ":{"path":"modules.0.vars.0.methods.0.signatures.0.params.0","type":"String"},"`filename` {String} ":{"path":"modules.0.vars.0.properties.2"},"`loaded` {Boolean} ":{"path":"modules.0.vars.0.properties.3"},"`parent` {Module Object} ":{"path":"modules.0.vars.0.properties.4"},"`children` {Array} ":{"path":"modules.0.vars.0.properties.5"},"module.require(id)":{"path":"modules.0.vars.0.methods.0","type":"method"},"Return: {Object} `exports` from the resolved module ":{"path":"modules.0.vars.0.methods.0.signatures.0.return","type":"Object"}},"net.json":{"net":{"path":"modules.0","type":"module"},"net.createServer([options], [connectionListener])":{"path":"modules.0.methods.0","type":"method"},"net.connect(options, [connectionListener])":{"path":"modules.0.methods.1","type":"method"},"net.createConnection(options, [connectionListener])":{"path":"modules.0.methods.2","type":"method"},"net.connect(port, [host], [connectListener])":{"path":"modules.0.methods.3","type":"method"},"net.createConnection(port, [host], [connectListener])":{"path":"modules.0.methods.4","type":"method"},"net.connect(path, [connectListener])":{"path":"modules.0.methods.5","type":"method"},"net.createConnection(path, [connectListener])":{"path":"modules.0.methods.6","type":"method"},"net.isIP(input)":{"path":"modules.0.methods.7","type":"method"},"net.isIPv4(input)":{"path":"modules.0.methods.8","type":"method"},"net.isIPv6(input)":{"path":"modules.0.methods.9","type":"method"},"Class: net.Server":{"path":"modules.0.classes.0","type":"class"},"server.listen(port, [host], [backlog], [callback])":{"path":"modules.0.classes.0.methods.0","type":"method"},"server.listen(path, [callback])":{"path":"modules.0.classes.0.methods.1","type":"method"},"server.listen(handle, [callback])":{"path":"modules.0.classes.0.methods.2","type":"method"},"`handle` {Object} ":{"path":"modules.0.classes.0.methods.2.signatures.0.params.0","type":"Object"},"`callback` {Function} ":{"path":"modules.0.classes.0.methods.2.signatures.0.params.1","type":"Function"},"server.close([callback])":{"path":"modules.0.classes.0.methods.3","type":"method"},"server.address()":{"path":"modules.0.classes.0.methods.4","type":"method"},"server.unref()":{"path":"modules.0.classes.0.methods.5","type":"method"},"server.ref()":{"path":"modules.0.classes.0.methods.6","type":"method"},"server.getConnections(callback)":{"path":"modules.0.classes.0.methods.7","type":"method"},"server.maxConnections":{"path":"modules.0.classes.0.properties.0"},"server.connections":{"path":"modules.0.classes.0.properties.1"},"Event: 'listening'":{"path":"modules.0.classes.0.events.0","type":"event"},"Event: 'connection'":{"path":"modules.0.classes.0.events.1","type":"event"},"Event: 'close'":{"path":"modules.0.classes.1.events.6","type":"event"},"Event: 'error'":{"path":"modules.0.classes.1.events.5","type":"event"},"Class: net.Socket":{"path":"modules.0.classes.1","type":"class"},"new net.Socket([options])":{"path":"modules.0.classes.1.methods.0","type":"method"},"socket.connect(port, [host], [connectListener])":{"path":"modules.0.classes.1.methods.1","type":"method"},"socket.connect(path, [connectListener])":{"path":"modules.0.classes.1.methods.2","type":"method"},"socket.setEncoding([encoding])":{"path":"modules.0.classes.1.methods.3","type":"method"},"socket.write(data, [encoding], [callback])":{"path":"modules.0.classes.1.methods.4","type":"method"},"socket.end([data], [encoding])":{"path":"modules.0.classes.1.methods.5","type":"method"},"socket.destroy()":{"path":"modules.0.classes.1.methods.6","type":"method"},"socket.pause()":{"path":"modules.0.classes.1.methods.7","type":"method"},"socket.resume()":{"path":"modules.0.classes.1.methods.8","type":"method"},"socket.setTimeout(timeout, [callback])":{"path":"modules.0.classes.1.methods.9","type":"method"},"socket.setNoDelay([noDelay])":{"path":"modules.0.classes.1.methods.10","type":"method"},"socket.setKeepAlive([enable], [initialDelay])":{"path":"modules.0.classes.1.methods.11","type":"method"},"socket.address()":{"path":"modules.0.classes.1.methods.12","type":"method"},"socket.unref()":{"path":"modules.0.classes.1.methods.13","type":"method"},"socket.ref()":{"path":"modules.0.classes.1.methods.14","type":"method"},"socket.bufferSize":{"path":"modules.0.classes.1.properties.0"},"socket.remoteAddress":{"path":"modules.0.classes.1.properties.1"},"socket.remotePort":{"path":"modules.0.classes.1.properties.2"},"socket.localAddress":{"path":"modules.0.classes.1.properties.3"},"socket.localPort":{"path":"modules.0.classes.1.properties.4"},"socket.bytesRead":{"path":"modules.0.classes.1.properties.5"},"socket.bytesWritten":{"path":"modules.0.classes.1.properties.6"},"Event: 'connect'":{"path":"modules.0.classes.1.events.0","type":"event"},"Event: 'data'":{"path":"modules.0.classes.1.events.1","type":"event"},"Event: 'end'":{"path":"modules.0.classes.1.events.2","type":"event"},"Event: 'timeout'":{"path":"modules.0.classes.1.events.3","type":"event"},"Event: 'drain'":{"path":"modules.0.classes.1.events.4","type":"event"}},"os.json":{"os":{"path":"modules.0","type":"module"},"os.tmpdir()":{"path":"modules.0.methods.0","type":"method"},"os.endianness()":{"path":"modules.0.methods.1","type":"method"},"os.hostname()":{"path":"modules.0.methods.2","type":"method"},"os.type()":{"path":"modules.0.methods.3","type":"method"},"os.platform()":{"path":"modules.0.methods.4","type":"method"},"os.arch()":{"path":"modules.0.methods.5","type":"method"},"os.release()":{"path":"modules.0.methods.6","type":"method"},"os.uptime()":{"path":"modules.0.methods.7","type":"method"},"os.loadavg()":{"path":"modules.0.methods.8","type":"method"},"os.totalmem()":{"path":"modules.0.methods.9","type":"method"},"os.freemem()":{"path":"modules.0.methods.10","type":"method"},"os.cpus()":{"path":"modules.0.methods.11","type":"method"},"os.networkInterfaces()":{"path":"modules.0.methods.12","type":"method"},"os.EOL":{"path":"modules.0.properties.0"}},"http.json":{"HTTP":{"path":"modules.0","type":"module"},"`STATUS_CODES` {Object} ":{"path":"modules.0.properties.0"},"http.globalAgent":{"path":"modules.0.properties.1"},"http.IncomingMessage":{"path":"modules.0.properties.2"},"Event: 'close'":{"path":"modules.0.classes.1.events.0","type":"event"},"message.httpVersion":{"path":"modules.0.properties.2.properties.0"},"message.headers":{"path":"modules.0.properties.2.properties.1"},"message.trailers":{"path":"modules.0.properties.2.properties.2"},"message.method":{"path":"modules.0.properties.2.properties.3"},"message.url":{"path":"modules.0.properties.2.properties.4"},"message.statusCode":{"path":"modules.0.properties.2.properties.5"},"message.socket":{"path":"modules.0.properties.2.properties.6"},"message.setTimeout(msecs, callback)":{"path":"modules.0.properties.2.methods.0","type":"method"},"`msecs` {Number} ":{"path":"modules.0.classes.1.methods.2.signatures.0.params.0","type":"Number"},"`callback` {Function} ":{"path":"modules.0.classes.1.methods.2.signatures.0.params.1","type":"Function"},"http.createServer([requestListener])":{"path":"modules.0.methods.0","type":"method"},"http.createClient([port], [host])":{"path":"modules.0.methods.1","type":"method"},"http.request(options, callback)":{"path":"modules.0.methods.2","type":"method"},"http.get(options, callback)":{"path":"modules.0.methods.3","type":"method"},"Class: http.Server":{"path":"modules.0.classes.0","type":"class"},"Event: 'request'":{"path":"modules.0.classes.0.events.0","type":"event"},"Event: 'connection'":{"path":"modules.0.classes.0.events.1","type":"event"},"Event: 'checkContinue'":{"path":"modules.0.classes.0.events.3","type":"event"},"Event: 'connect'":{"path":"modules.0.classes.3.events.2","type":"event"},"Event: 'upgrade'":{"path":"modules.0.classes.3.events.3","type":"event"},"Event: 'clientError'":{"path":"modules.0.classes.0.events.6","type":"event"},"server.listen(port, [hostname], [backlog], [callback])":{"path":"modules.0.classes.0.methods.0","type":"method"},"server.listen(path, [callback])":{"path":"modules.0.classes.0.methods.1","type":"method"},"server.listen(handle, [callback])":{"path":"modules.0.classes.0.methods.2","type":"method"},"`handle` {Object} ":{"path":"modules.0.classes.0.methods.2.signatures.0.params.0","type":"Object"},"server.close([callback])":{"path":"modules.0.classes.0.methods.3","type":"method"},"server.setTimeout(msecs, callback)":{"path":"modules.0.classes.0.methods.4","type":"method"},"server.maxHeadersCount":{"path":"modules.0.classes.0.properties.0"},"`timeout` {Number} Default = 120000 (2 minutes) ":{"path":"modules.0.classes.0.properties.1"},"Class: http.ServerResponse":{"path":"modules.0.classes.1","type":"class"},"response.writeContinue()":{"path":"modules.0.classes.1.methods.0","type":"method"},"response.writeHead(statusCode, [reasonPhrase], [headers])":{"path":"modules.0.classes.1.methods.1","type":"method"},"response.setTimeout(msecs, callback)":{"path":"modules.0.classes.1.methods.2","type":"method"},"response.setHeader(name, value)":{"path":"modules.0.classes.1.methods.3","type":"method"},"response.getHeader(name)":{"path":"modules.0.classes.1.methods.4","type":"method"},"response.removeHeader(name)":{"path":"modules.0.classes.1.methods.5","type":"method"},"response.write(chunk, [encoding])":{"path":"modules.0.classes.1.methods.6","type":"method"},"response.addTrailers(headers)":{"path":"modules.0.classes.1.methods.7","type":"method"},"response.end([data], [encoding])":{"path":"modules.0.classes.1.methods.8","type":"method"},"response.statusCode":{"path":"modules.0.classes.1.properties.0"},"response.headersSent":{"path":"modules.0.classes.1.properties.1"},"response.sendDate":{"path":"modules.0.classes.1.properties.2"},"Class: http.Agent":{"path":"modules.0.classes.2","type":"class"},"agent.maxSockets":{"path":"modules.0.classes.2.properties.0"},"agent.sockets":{"path":"modules.0.classes.2.properties.1"},"agent.requests":{"path":"modules.0.classes.2.properties.2"},"Class: http.ClientRequest":{"path":"modules.0.classes.3","type":"class"},"Event 'response'":{"path":"modules.0.classes.3.events.0","type":"event"},"Event: 'socket'":{"path":"modules.0.classes.3.events.1","type":"event"},"Event: 'continue'":{"path":"modules.0.classes.3.events.4","type":"event"},"request.write(chunk, [encoding])":{"path":"modules.0.classes.3.methods.0","type":"method"},"request.end([data], [encoding])":{"path":"modules.0.classes.3.methods.1","type":"method"},"request.abort()":{"path":"modules.0.classes.3.methods.2","type":"method"},"request.setTimeout(timeout, [callback])":{"path":"modules.0.classes.3.methods.3","type":"method"},"request.setNoDelay([noDelay])":{"path":"modules.0.classes.3.methods.4","type":"method"},"request.setSocketKeepAlive([enable], [initialDelay])":{"path":"modules.0.classes.3.methods.5","type":"method"}},"path.json":{"Path":{"path":"modules.0","type":"module"},"path.normalize(p)":{"path":"modules.0.methods.0","type":"method"},"path.join([path1], [path2], [...])":{"path":"modules.0.methods.1","type":"method"},"path.resolve([from ...], to)":{"path":"modules.0.methods.2","type":"method"},"path.relative(from, to)":{"path":"modules.0.methods.3","type":"method"},"path.dirname(p)":{"path":"modules.0.methods.4","type":"method"},"path.basename(p, [ext])":{"path":"modules.0.methods.5","type":"method"},"path.extname(p)":{"path":"modules.0.methods.6","type":"method"},"path.sep":{"path":"modules.0.properties.0"},"path.delimiter":{"path":"modules.0.properties.1"}},"process.json":{"process":{"path":"globals.0","type":"global"},"Event: 'exit'":{"path":"globals.0.events.0","type":"event"},"Event: 'uncaughtException'":{"path":"globals.0.events.1","type":"event"},"Signal Events":{"path":"globals.0.events.2","type":"event"},"process.stdout":{"path":"globals.0.properties.0"},"process.stderr":{"path":"globals.0.properties.1"},"process.stdin":{"path":"globals.0.properties.2"},"process.argv":{"path":"globals.0.properties.3"},"process.execPath":{"path":"globals.0.properties.4"},"process.env":{"path":"globals.0.properties.5"},"process.version":{"path":"globals.0.properties.6"},"process.versions":{"path":"globals.0.properties.7"},"process.config":{"path":"globals.0.properties.8"},"process.pid":{"path":"globals.0.properties.9"},"process.title":{"path":"globals.0.properties.10"},"process.arch":{"path":"globals.0.properties.11"},"process.platform":{"path":"globals.0.properties.12"},"`maxTickDepth` {Number} Default = 1000 ":{"path":"globals.0.properties.13"},"process.abort()":{"path":"globals.0.methods.0","type":"method"},"process.chdir(directory)":{"path":"globals.0.methods.1","type":"method"},"process.cwd()":{"path":"globals.0.methods.2","type":"method"},"process.exit([code])":{"path":"globals.0.methods.3","type":"method"},"process.getgid()":{"path":"globals.0.methods.4","type":"method"},"process.setgid(id)":{"path":"globals.0.methods.5","type":"method"},"process.getuid()":{"path":"globals.0.methods.6","type":"method"},"process.setuid(id)":{"path":"globals.0.methods.7","type":"method"},"process.getgroups()":{"path":"globals.0.methods.8","type":"method"},"process.setgroups(groups)":{"path":"globals.0.methods.9","type":"method"},"process.initgroups(user, extra_group)":{"path":"globals.0.methods.10","type":"method"},"process.kill(pid, [signal])":{"path":"globals.0.methods.11","type":"method"},"process.memoryUsage()":{"path":"globals.0.methods.12","type":"method"},"process.nextTick(callback)":{"path":"globals.0.methods.13","type":"method"},"process.umask([mask])":{"path":"globals.0.methods.14","type":"method"},"process.uptime()":{"path":"globals.0.methods.15","type":"method"},"process.hrtime()":{"path":"globals.0.methods.16","type":"method"}},"punycode.json":{"punycode":{"path":"modules.0","type":"module"},"punycode.decode(string)":{"path":"modules.0.methods.0","type":"method"},"punycode.encode(string)":{"path":"modules.0.methods.1","type":"method"},"punycode.toUnicode(domain)":{"path":"modules.0.methods.2","type":"method"},"punycode.toASCII(domain)":{"path":"modules.0.methods.3","type":"method"},"punycode.ucs2":{"path":"modules.0.properties.0"},"punycode.ucs2.decode(string)":{"path":"modules.0.properties.0.modules.0","type":"module"},"punycode.ucs2.encode(codePoints)":{"path":"modules.0.properties.0.modules.1","type":"module"},"punycode.version":{"path":"modules.0.properties.1"}},"querystring.json":{"Query String":{"path":"modules.0","type":"module"},"querystring.stringify(obj, [sep], [eq])":{"path":"modules.0.methods.0","type":"method"},"querystring.parse(str, [sep], [eq], [options])":{"path":"modules.0.methods.1","type":"method"},"querystring.escape":{"path":"modules.0.properties.0"},"querystring.unescape":{"path":"modules.0.properties.1"}},"readline.json":{"Readline":{"path":"modules.0","type":"module"},"readline.createInterface(options)":{"path":"modules.0.methods.0","type":"method"},"Class: Interface":{"path":"modules.0.classes.0","type":"class"},"rl.setPrompt(prompt, length)":{"path":"modules.0.classes.0.methods.0","type":"method"},"rl.prompt([preserveCursor])":{"path":"modules.0.classes.0.methods.1","type":"method"},"rl.question(query, callback)":{"path":"modules.0.classes.0.methods.2","type":"method"},"rl.pause()":{"path":"modules.0.classes.0.methods.3","type":"method"},"rl.resume()":{"path":"modules.0.classes.0.methods.4","type":"method"},"rl.close()":{"path":"modules.0.classes.0.methods.5","type":"method"},"rl.write(data, [key])":{"path":"modules.0.classes.0.methods.6","type":"method"},"Events":{"path":"modules.0.modules.0","type":"module"},"Event: 'line'":{"path":"modules.0.modules.0.events.0","type":"event"},"Event: 'pause'":{"path":"modules.0.modules.0.events.1","type":"event"},"Event: 'resume'":{"path":"modules.0.modules.0.events.2","type":"event"},"Event: 'close'":{"path":"modules.0.modules.0.events.3","type":"event"},"Event: 'SIGINT'":{"path":"modules.0.modules.0.events.4","type":"event"},"Event: 'SIGTSTP'":{"path":"modules.0.modules.0.events.5","type":"event"},"Event: 'SIGCONT'":{"path":"modules.0.modules.0.events.6","type":"event"}},"repl.json":{"REPL":{"path":"modules.0","type":"module"},"repl.start(options)":{"path":"modules.0.methods.0","type":"method"},"Event: 'exit'":{"path":"modules.0.methods.0.events.0","type":"event"},"REPL Features":{"path":"modules.0.miscs.0","type":"misc"}},"stdio.json":{"console":{"path":"globals.0","type":"global"},"console.log([data], [...])":{"path":"globals.0.methods.0","type":"method"},"console.info([data], [...])":{"path":"globals.0.methods.1","type":"method"},"console.error([data], [...])":{"path":"globals.0.methods.2","type":"method"},"console.warn([data], [...])":{"path":"globals.0.methods.3","type":"method"},"console.dir(obj)":{"path":"globals.0.methods.4","type":"method"},"console.time(label)":{"path":"globals.0.methods.5","type":"method"},"console.timeEnd(label)":{"path":"globals.0.methods.6","type":"method"},"console.trace(label)":{"path":"globals.0.methods.7","type":"method"},"console.assert(expression, [message])":{"path":"globals.0.methods.8","type":"method"}},"stream.json":{"Stream":{"path":"modules.0","type":"module"},"Compatibility":{"path":"modules.0.modules.0","type":"module"},"Class: stream.Readable":{"path":"modules.0.classes.0","type":"class"},"new stream.Readable([options])":{"path":"modules.0.classes.0.methods.0","type":"method"},"`options` {Object} ":{"path":"modules.0.classes.1.methods.0.signatures.0.params.0","type":"Object"},"`highWaterMark` {Number} The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource.  Default=16kb ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.0.options.0","type":"Number"},"`encoding` {String} If specified, then buffers will be decoded to strings using the specified encoding.  Default=null ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.0.options.1","type":"String"},"`objectMode` {Boolean} Whether this stream should behave as a stream of objects. Meaning that stream.read(n) returns a single value instead of a Buffer of size n ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.0.options.2","type":"Boolean"},"readable.\\_read(size)":{"path":"modules.0.classes.0.methods.1","type":"method"},"`size` {Number} Number of bytes to read asynchronously ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.0","type":"Number"},"readable.push(chunk, [encoding])":{"path":"modules.0.classes.0.methods.2","type":"method"},"return {Boolean} Whether or not more pushes should be performed ":{"path":"modules.0.classes.0.methods.3.signatures.0.return","type":"Boolean"},"`chunk` {Buffer | null | String} Chunk of data to push into the read queue ":{"path":"modules.0.classes.0.methods.2.signatures.0.params.0","type":"Buffer | null | String"},"`encoding` {String} Encoding of String chunks.  Must be a valid Buffer encoding, such as `'utf8'` or `'ascii'` ":{"path":"modules.0.classes.0.methods.2.signatures.0.params.1","type":"String"},"readable.unshift(chunk)":{"path":"modules.0.classes.0.methods.3","type":"method"},"`chunk` {Buffer | null | String} Chunk of data to unshift onto the read queue ":{"path":"modules.0.classes.0.methods.3.signatures.0.params.0","type":"Buffer | null | String"},"readable.wrap(stream)":{"path":"modules.0.classes.0.methods.4","type":"method"},"`stream` {Stream} An \"old style\" readable stream ":{"path":"modules.0.classes.0.methods.4.signatures.0.params.0","type":"Stream"},"readable.setEncoding(encoding)":{"path":"modules.0.classes.0.methods.5","type":"method"},"readable.read([size])":{"path":"modules.0.classes.0.methods.6","type":"method"},"Return: {Buffer | String | null} ":{"path":"modules.0.classes.0.methods.6.signatures.0.return","type":"Buffer | String | null"},"`size` {Number | null} Optional number of bytes to read. ":{"path":"modules.0.classes.0.methods.6.signatures.0.params.0","type":"Number | null"},"readable.pipe(destination, [options])":{"path":"modules.0.classes.0.methods.7","type":"method"},"`destination` {Writable Stream} ":{"path":"modules.0.classes.0.methods.7.signatures.0.params.0","type":"Writable Stream"},"`options` {Object} Optional ":{"path":"modules.0.classes.0.methods.7.signatures.0.params.1","type":"Object"},"`end` {Boolean} Default=true ":{"path":"modules.0.classes.0.methods.7.signatures.0.params.1.options.0","type":"Boolean"},"readable.unpipe([destination])":{"path":"modules.0.classes.0.methods.8","type":"method"},"`destination` {Writable Stream} Optional ":{"path":"modules.0.classes.0.methods.8.signatures.0.params.0","type":"Writable Stream"},"readable.pause()":{"path":"modules.0.classes.0.methods.9","type":"method"},"readable.resume()":{"path":"modules.0.classes.0.methods.10","type":"method"},"Event: 'readable'":{"path":"modules.0.classes.0.events.0","type":"event"},"Event: 'end'":{"path":"modules.0.classes.0.events.1","type":"event"},"Event: 'data'":{"path":"modules.0.classes.0.events.2","type":"event"},"Event: 'error'":{"path":"modules.0.classes.1.events.1","type":"event"},"Event: 'close'":{"path":"modules.0.classes.1.events.2","type":"event"},"Class: stream.Writable":{"path":"modules.0.classes.1","type":"class"},"new stream.Writable([options])":{"path":"modules.0.classes.1.methods.0","type":"method"},"`highWaterMark` {Number} Buffer level when `write()` starts returning false. Default=16kb ":{"path":"modules.0.classes.1.methods.0.signatures.0.params.0.options.0","type":"Number"},"`decodeStrings` {Boolean} Whether or not to decode strings into Buffers before passing them to `_write()`.  Default=true ":{"path":"modules.0.classes.1.methods.0.signatures.0.params.0.options.1","type":"Boolean"},"writable.\\_write(chunk, encoding, callback)":{"path":"modules.0.classes.1.methods.1","type":"method"},"`chunk` {Buffer | String} The chunk to be written.  Will always be a buffer unless the `decodeStrings` option was set to `false`. ":{"path":"modules.0.classes.1.methods.1.signatures.0.params.0","type":"Buffer | String"},"`encoding` {String} If the chunk is a string, then this is the encoding type.  Ignore chunk is a buffer.  Note that chunk will **always** be a buffer unless the `decodeStrings` option is explicitly set to `false`. ":{"path":"modules.0.classes.1.methods.1.signatures.0.params.1","type":"String"},"`callback` {Function} Call this function (optionally with an error argument) when you are done processing the supplied chunk. ":{"path":"modules.0.classes.3.methods.1.signatures.0.params.2","type":"Function"},"writable.write(chunk, [encoding], [callback])":{"path":"modules.0.classes.1.methods.2","type":"method"},"Returns {Boolean} ":{"path":"modules.0.classes.1.methods.2.signatures.0.return","type":"Boolean"},"`chunk` {Buffer | String} Data to be written ":{"path":"modules.0.classes.1.methods.2.signatures.0.params.0","type":"Buffer | String"},"`encoding` {String} Optional.  If `chunk` is a string, then encoding defaults to `'utf8'` ":{"path":"modules.0.classes.1.methods.3.signatures.0.params.1","type":"String"},"`callback` {Function} Optional.  Called when this chunk is successfully written. ":{"path":"modules.0.classes.1.methods.2.signatures.0.params.2","type":"Function"},"writable.end([chunk], [encoding], [callback])":{"path":"modules.0.classes.1.methods.3","type":"method"},"`chunk` {Buffer | String} Optional final data to be written ":{"path":"modules.0.classes.1.methods.3.signatures.0.params.0","type":"Buffer | String"},"`callback` {Function} Optional.  Called when the final chunk is successfully written. ":{"path":"modules.0.classes.1.methods.3.signatures.0.params.2","type":"Function"},"Event: 'drain'":{"path":"modules.0.classes.1.events.0","type":"event"},"Event: 'finish'":{"path":"modules.0.classes.1.events.3","type":"event"},"Event: 'pipe'":{"path":"modules.0.classes.1.events.4","type":"event"},"Event 'unpipe'":{"path":"modules.0.classes.1.events.5","type":"event"},"Class: stream.Duplex":{"path":"modules.0.classes.2","type":"class"},"new stream.Duplex(options)":{"path":"modules.0.classes.2.methods.0","type":"method"},"`options` {Object} Passed to both Writable and Readable constructors. Also has the following fields: ":{"path":"modules.0.classes.2.methods.0.signatures.0.params.0","type":"Object"},"`allowHalfOpen` {Boolean} Default=true.  If set to `false`, then the stream will automatically end the readable side when the writable side ends and vice versa. ":{"path":"modules.0.classes.2.methods.0.signatures.0.params.0.options.0","type":"Boolean"},"Class: stream.Transform":{"path":"modules.0.classes.3","type":"class"},"new stream.Transform([options])":{"path":"modules.0.classes.3.methods.0","type":"method"},"`options` {Object} Passed to both Writable and Readable constructors. ":{"path":"modules.0.classes.3.methods.0.signatures.0.params.0","type":"Object"},"transform.\\_transform(chunk, encoding, callback)":{"path":"modules.0.classes.3.methods.1","type":"method"},"`chunk` {Buffer | String} The chunk to be transformed.  Will always be a buffer unless the `decodeStrings` option was set to `false`. ":{"path":"modules.0.classes.3.methods.1.signatures.0.params.0","type":"Buffer | String"},"`encoding` {String} If the chunk is a string, then this is the encoding type.  (Ignore if `decodeStrings` chunk is a buffer.) ":{"path":"modules.0.classes.3.methods.1.signatures.0.params.1","type":"String"},"transform.\\_flush(callback)":{"path":"modules.0.classes.3.methods.2","type":"method"},"`callback` {Function} Call this function (optionally with an error argument) when you are done flushing any remaining data. ":{"path":"modules.0.classes.3.methods.2.signatures.0.params.0","type":"Function"},"Class: stream.PassThrough":{"path":"modules.0.classes.4","type":"class"}},"string_decoder.json":{"StringDecoder":{"path":"modules.0","type":"module"},"Class: StringDecoder":{"path":"modules.0.classes.0","type":"class"},"decoder.write(buffer)":{"path":"modules.0.classes.0.methods.0","type":"method"},"decoder.end()":{"path":"modules.0.classes.0.methods.1","type":"method"}},"timers.json":{"Timers":{"path":"modules.0","type":"module"},"setTimeout(callback, delay, [arg], [...])":{"path":"modules.0.methods.0","type":"method"},"clearTimeout(timeoutId)":{"path":"modules.0.methods.1","type":"method"},"setInterval(callback, delay, [arg], [...])":{"path":"modules.0.methods.2","type":"method"},"clearInterval(intervalId)":{"path":"modules.0.methods.3","type":"method"},"unref()":{"path":"modules.0.methods.4","type":"method"},"ref()":{"path":"modules.0.methods.5","type":"method"},"setImmediate(callback, [arg], [...])":{"path":"modules.0.methods.6","type":"method"},"clearImmediate(immediateId)":{"path":"modules.0.methods.7","type":"method"}},"tls.json":{"TLS (SSL)":{"path":"modules.0","type":"module"},"Client-initiated renegotiation attack mitigation":{"path":"modules.0.miscs.0","type":"misc"},"NPN and SNI":{"path":"modules.0.miscs.1","type":"misc"},"tls.getCiphers()":{"path":"modules.0.methods.0","type":"method"},"tls.createServer(options, [secureConnectionListener])":{"path":"modules.0.methods.1","type":"method"},"tls.connect(options, [callback])":{"path":"modules.0.methods.2","type":"method"},"tls.connect(port, [host], [options], [callback])":{"path":"modules.0.methods.3","type":"method"},"tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])":{"path":"modules.0.methods.4","type":"method"},"tls.SLAB_BUFFER_SIZE":{"path":"modules.0.properties.0"},"Class: SecurePair":{"path":"modules.0.classes.0","type":"class"},"Event: 'secure'":{"path":"modules.0.classes.0.events.0","type":"event"},"Class: tls.Server":{"path":"modules.0.classes.1","type":"class"},"Event: 'secureConnection'":{"path":"modules.0.classes.1.events.0","type":"event"},"Event: 'clientError'":{"path":"modules.0.classes.1.events.1","type":"event"},"Event: 'newSession'":{"path":"modules.0.classes.1.events.2","type":"event"},"Event: 'resumeSession'":{"path":"modules.0.classes.1.events.3","type":"event"},"server.listen(port, [host], [callback])":{"path":"modules.0.classes.1.methods.0","type":"method"},"server.close()":{"path":"modules.0.classes.1.methods.1","type":"method"},"server.address()":{"path":"modules.0.classes.1.methods.2","type":"method"},"server.addContext(hostname, credentials)":{"path":"modules.0.classes.1.methods.3","type":"method"},"server.maxConnections":{"path":"modules.0.classes.1.properties.0"},"server.connections":{"path":"modules.0.classes.1.properties.1"},"Class: CryptoStream":{"path":"modules.0.classes.2","type":"class"},"cryptoStream.bytesWritten":{"path":"modules.0.classes.2.properties.0"},"Class: tls.CleartextStream":{"path":"modules.0.classes.3","type":"class"},"Event: 'secureConnect'":{"path":"modules.0.classes.3.events.0","type":"event"},"cleartextStream.authorized":{"path":"modules.0.classes.3.properties.0"},"cleartextStream.authorizationError":{"path":"modules.0.classes.3.properties.1"},"cleartextStream.remoteAddress":{"path":"modules.0.classes.3.properties.2"},"cleartextStream.remotePort":{"path":"modules.0.classes.3.properties.3"},"cleartextStream.getPeerCertificate()":{"path":"modules.0.classes.3.methods.0","type":"method"},"cleartextStream.getCipher()":{"path":"modules.0.classes.3.methods.1","type":"method"},"cleartextStream.address()":{"path":"modules.0.classes.3.methods.2","type":"method"}},"tty.json":{"TTY":{"path":"modules.0","type":"module"},"tty.isatty(fd)":{"path":"modules.0.methods.0","type":"method"},"tty.setRawMode(mode)":{"path":"modules.0.methods.1","type":"method"},"Class: ReadStream":{"path":"modules.0.classes.0","type":"class"},"rs.isRaw":{"path":"modules.0.classes.0.properties.0"},"rs.setRawMode(mode)":{"path":"modules.0.classes.0.methods.0","type":"method"},"Class: WriteStream":{"path":"modules.0.classes.1","type":"class"},"ws.columns":{"path":"modules.0.classes.1.properties.0"},"ws.rows":{"path":"modules.0.classes.1.properties.1"},"Event: 'resize'":{"path":"modules.0.classes.1.events.0","type":"event"}},"dgram.json":{"UDP / Datagram Sockets":{"path":"modules.0","type":"module"},"dgram.createSocket(type, [callback])":{"path":"modules.0.methods.0","type":"method"},"Returns: Socket object ":{"path":"modules.0.methods.0.signatures.0.return"},"`type` String. Either 'udp4' or 'udp6' ":{"path":"modules.0.methods.0.signatures.0.params.0"},"`callback` Function. Attached as a listener to `message` events. Optional ":{"path":"modules.0.methods.0.signatures.0.params.1"},"Class: dgram.Socket":{"path":"modules.0.classes.0","type":"class"},"Event: 'message'":{"path":"modules.0.classes.0.events.0","type":"event"},"Event: 'listening'":{"path":"modules.0.classes.0.events.1","type":"event"},"Event: 'close'":{"path":"modules.0.classes.0.events.2","type":"event"},"Event: 'error'":{"path":"modules.0.classes.0.events.3","type":"event"},"socket.send(buf, offset, length, port, address, [callback])":{"path":"modules.0.classes.0.methods.0","type":"method"},"`buf` Buffer object.  Message to be sent ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.0"},"`offset` Integer. Offset in the buffer where the message starts. ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.1"},"`length` Integer. Number of bytes in the message. ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.2"},"`port` Integer. destination port ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.3"},"`address` String. destination IP ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.4"},"`callback` Function. Callback when message is done being delivered. Optional. ":{"path":"modules.0.classes.0.methods.0.signatures.0.params.5"},"socket.bind(port, [address], [callback])":{"path":"modules.0.classes.0.methods.1","type":"method"},"`port` Integer ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.0"},"`address` String, Optional ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.1"},"`callback` Function, Optional ":{"path":"modules.0.classes.0.methods.1.signatures.0.params.2"},"socket.close()":{"path":"modules.0.classes.0.methods.2","type":"method"},"socket.address()":{"path":"modules.0.classes.0.methods.3","type":"method"},"socket.setBroadcast(flag)":{"path":"modules.0.classes.0.methods.4","type":"method"},"`flag` Boolean ":{"path":"modules.0.classes.0.methods.7.signatures.0.params.0"},"socket.setTTL(ttl)":{"path":"modules.0.classes.0.methods.5","type":"method"},"`ttl` Integer ":{"path":"modules.0.classes.0.methods.6.signatures.0.params.0"},"socket.setMulticastTTL(ttl)":{"path":"modules.0.classes.0.methods.6","type":"method"},"socket.setMulticastLoopback(flag)":{"path":"modules.0.classes.0.methods.7","type":"method"},"socket.addMembership(multicastAddress, [multicastInterface])":{"path":"modules.0.classes.0.methods.8","type":"method"},"`multicastAddress` String ":{"path":"modules.0.classes.0.methods.9.signatures.0.params.0"},"`multicastInterface` String, Optional ":{"path":"modules.0.classes.0.methods.9.signatures.0.params.1"},"socket.dropMembership(multicastAddress, [multicastInterface])":{"path":"modules.0.classes.0.methods.9","type":"method"},"socket.unref()":{"path":"modules.0.classes.0.methods.10","type":"method"},"socket.ref()":{"path":"modules.0.classes.0.methods.11","type":"method"}},"url.json":{"URL":{"path":"modules.0","type":"module"},"url.parse(urlStr, [parseQueryString], [slashesDenoteHost])":{"path":"modules.0.methods.0","type":"method"},"url.format(urlObj)":{"path":"modules.0.methods.1","type":"method"},"url.resolve(from, to)":{"path":"modules.0.methods.2","type":"method"}},"util.json":{"util":{"path":"modules.0","type":"module"},"util.format(format, [...])":{"path":"modules.0.methods.0","type":"method"},"util.debug(string)":{"path":"modules.0.methods.1","type":"method"},"util.error([...])":{"path":"modules.0.methods.2","type":"method"},"util.puts([...])":{"path":"modules.0.methods.3","type":"method"},"util.print([...])":{"path":"modules.0.methods.4","type":"method"},"util.log(string)":{"path":"modules.0.methods.5","type":"method"},"util.inspect(object, [options])":{"path":"modules.0.methods.6","type":"method"},"Customizing `util.inspect` colors":{"path":"modules.0.methods.6.modules.0","type":"module"},"util.isArray(object)":{"path":"modules.0.methods.7","type":"method"},"util.isRegExp(object)":{"path":"modules.0.methods.8","type":"method"},"util.isDate(object)":{"path":"modules.0.methods.9","type":"method"},"util.isError(object)":{"path":"modules.0.methods.10","type":"method"},"util.pump(readableStream, writableStream, [callback])":{"path":"modules.0.methods.11","type":"method"},"util.inherits(constructor, superConstructor)":{"path":"modules.0.methods.12","type":"method"}},"vm.json":{"Executing JavaScript":{"path":"modules.0","type":"module"},"Caveats":{"path":"modules.0.modules.0","type":"module"},"Sandboxes":{"path":"modules.0.modules.0.modules.0","type":"module"},"Globals":{"path":"modules.0.modules.0.modules.1","type":"module"},"vm.runInThisContext(code, [filename])":{"path":"modules.0.methods.0","type":"method"},"vm.runInNewContext(code, [sandbox], [filename])":{"path":"modules.0.methods.1","type":"method"},"vm.runInContext(code, context, [filename])":{"path":"modules.0.methods.2","type":"method"},"vm.createContext([initSandbox])":{"path":"modules.0.methods.3","type":"method"},"vm.createScript(code, [filename])":{"path":"modules.0.methods.4","type":"method"},"Class: Script":{"path":"modules.0.classes.0","type":"class"},"script.runInThisContext()":{"path":"modules.0.classes.0.methods.0","type":"method"},"script.runInNewContext([sandbox])":{"path":"modules.0.classes.0.methods.1","type":"method"}},"zlib.json":{"Zlib":{"path":"modules.0","type":"module"},"zlib.createGzip([options])":{"path":"modules.0.methods.0","type":"method"},"zlib.createGunzip([options])":{"path":"modules.0.methods.1","type":"method"},"zlib.createDeflate([options])":{"path":"modules.0.methods.2","type":"method"},"zlib.createInflate([options])":{"path":"modules.0.methods.3","type":"method"},"zlib.createDeflateRaw([options])":{"path":"modules.0.methods.4","type":"method"},"zlib.createInflateRaw([options])":{"path":"modules.0.methods.5","type":"method"},"zlib.createUnzip([options])":{"path":"modules.0.methods.6","type":"method"},"zlib.deflate(buf, callback)":{"path":"modules.0.methods.7","type":"method"},"zlib.deflateRaw(buf, callback)":{"path":"modules.0.methods.8","type":"method"},"zlib.gzip(buf, callback)":{"path":"modules.0.methods.9","type":"method"},"zlib.gunzip(buf, callback)":{"path":"modules.0.methods.10","type":"method"},"zlib.inflate(buf, callback)":{"path":"modules.0.methods.11","type":"method"},"zlib.inflateRaw(buf, callback)":{"path":"modules.0.methods.12","type":"method"},"zlib.unzip(buf, callback)":{"path":"modules.0.methods.13","type":"method"},"Class: zlib.Zlib":{"path":"modules.0.classes.0","type":"class"},"zlib.flush(callback)":{"path":"modules.0.classes.0.methods.0","type":"method"},"zlib.reset()":{"path":"modules.0.classes.0.methods.1","type":"method"},"Class: zlib.Gzip":{"path":"modules.0.classes.1","type":"class"},"Class: zlib.Gunzip":{"path":"modules.0.classes.2","type":"class"},"Class: zlib.Deflate":{"path":"modules.0.classes.3","type":"class"},"Class: zlib.Inflate":{"path":"modules.0.classes.4","type":"class"},"Class: zlib.DeflateRaw":{"path":"modules.0.classes.5","type":"class"},"Class: zlib.InflateRaw":{"path":"modules.0.classes.6","type":"class"},"Class: zlib.Unzip":{"path":"modules.0.classes.7","type":"class"},"Convenience Methods":{"path":"modules.0.miscs.0","type":"misc"},"Options":{"path":"modules.0.miscs.1","type":"misc"},"Memory Usage Tuning":{"path":"modules.0.miscs.2","type":"misc"},"Constants":{"path":"modules.0.miscs.3","type":"misc"}}}