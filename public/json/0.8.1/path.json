{"source":"doc/api/path.markdown","modules":[{"textRaw":"Path","name":"path","stability":3,"stabilityText":"Stable","desc":"<p>This module contains utilities for handling and transforming file\npaths.  Almost all these methods perform only string transformations.\nThe file system is not consulted to check whether paths are valid.\n\n</p>\n<p>Use <code>require(&apos;path&apos;)</code> to use this module.  The following methods are provided:\n\n</p>\n","methods":[{"textRaw":"path.normalize(p)","type":"method","name":"normalize","desc":"<p>Normalize a string path, taking care of <code>&apos;..&apos;</code> and <code>&apos;.&apos;</code> parts.\n\n</p>\n<p>When multiple slashes are found, they&apos;re replaced by a single one;\nwhen the path contains a trailing slash, it is preserved.\nOn windows backslashes are used. \n\n</p>\n<p>Example:\n\n</p>\n<pre><code>path.normalize(&apos;/foo/bar//baz/asdf/quux/..&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;</code></pre>\n","signatures":[{"params":[{"name":"p"}]}]},{"textRaw":"path.join([path1], [path2], [...])","type":"method","name":"join","desc":"<p>Join all arguments together and normalize the resulting path.\nNon-string arguments are ignored.\n\n</p>\n<p>Example:\n\n</p>\n<pre><code>path.join(&apos;/foo&apos;, &apos;bar&apos;, &apos;baz/asdf&apos;, &apos;quux&apos;, &apos;..&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;\n\npath.join(&apos;foo&apos;, {}, &apos;bar&apos;)\n// returns\n&apos;foo/bar&apos;</code></pre>\n","signatures":[{"params":[{"name":"path1","optional":true},{"name":"path2","optional":true},{"name":"...","optional":true}]}]},{"textRaw":"path.resolve([from ...], to)","type":"method","name":"resolve","desc":"<p>Resolves <code>to</code> to an absolute path.\n\n</p>\n<p>If <code>to</code> isn&apos;t already absolute <code>from</code> arguments are prepended in right to left\norder, until an absolute path is found. If after using all <code>from</code> paths still\nno absolute path is found, the current working directory is used as well. The\nresulting path is normalized, and trailing slashes are removed unless the path \ngets resolved to the root directory. Non-string arguments are ignored.\n\n</p>\n<p>Another way to think of it is as a sequence of <code>cd</code> commands in a shell.\n\n</p>\n<pre><code>path.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)</code></pre>\n<p>Is similar to:\n\n</p>\n<pre><code>cd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subfile\npwd</code></pre>\n<p>The difference is that the different paths don&apos;t need to exist and may also be\nfiles.\n\n</p>\n<p>Examples:\n\n</p>\n<pre><code>path.resolve(&apos;/foo/bar&apos;, &apos;./baz&apos;)\n// returns\n&apos;/foo/bar/baz&apos;\n\npath.resolve(&apos;/foo/bar&apos;, &apos;/tmp/file/&apos;)\n// returns\n&apos;/tmp/file&apos;\n\npath.resolve(&apos;wwwroot&apos;, &apos;static_files/png/&apos;, &apos;../gif/image.gif&apos;)\n// if currently in /home/myself/node, it returns\n&apos;/home/myself/node/wwwroot/static_files/gif/image.gif&apos;</code></pre>\n","signatures":[{"params":[{"name":"from ...","optional":true},{"name":"to"}]}]},{"textRaw":"path.relative(from, to)","type":"method","name":"relative","desc":"<p>Solve the relative path from <code>from</code> to <code>to</code>.\n\n</p>\n<p>At times we have two absolute paths, and we need to derive the relative\npath from one to the other.  This is actually the reverse transform of\n<code>path.resolve</code>, which means we see that:\n\n</p>\n<pre><code>path.resolve(from, path.relative(from, to)) == path.resolve(to)</code></pre>\n<p>Examples:\n\n</p>\n<pre><code>path.relative(&apos;C:\\\\orandea\\\\test\\\\aaa&apos;, &apos;C:\\\\orandea\\\\impl\\\\bbb&apos;)\n// returns\n&apos;..\\\\..\\\\impl\\\\bbb&apos;\n\npath.relative(&apos;/data/orandea/test/aaa&apos;, &apos;/data/orandea/impl/bbb&apos;)\n// returns\n&apos;../../impl/bbb&apos;</code></pre>\n","signatures":[{"params":[{"name":"from"},{"name":"to"}]}]},{"textRaw":"path.dirname(p)","type":"method","name":"dirname","desc":"<p>Return the directory name of a path.  Similar to the Unix <code>dirname</code> command.\n\n</p>\n<p>Example:\n\n</p>\n<pre><code>path.dirname(&apos;/foo/bar/baz/asdf/quux&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;</code></pre>\n","signatures":[{"params":[{"name":"p"}]}]},{"textRaw":"path.basename(p, [ext])","type":"method","name":"basename","desc":"<p>Return the last portion of a path.  Similar to the Unix <code>basename</code> command.\n\n</p>\n<p>Example:\n\n</p>\n<pre><code>path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;)\n// returns\n&apos;quux.html&apos;\n\npath.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;, &apos;.html&apos;)\n// returns\n&apos;quux&apos;</code></pre>\n","signatures":[{"params":[{"name":"p"},{"name":"ext","optional":true}]}]},{"textRaw":"path.extname(p)","type":"method","name":"extname","desc":"<p>Return the extension of the path, from the last &apos;.&apos; to end of string\nin the last portion of the path.  If there is no &apos;.&apos; in the last portion\nof the path or the first character of it is &apos;.&apos;, then it returns\nan empty string.  Examples:\n\n</p>\n<pre><code>path.extname(&apos;index.html&apos;)\n// returns\n&apos;.html&apos;\n\npath.extname(&apos;index.&apos;)\n// returns\n&apos;.&apos;\n\npath.extname(&apos;index&apos;)\n// returns\n&apos;&apos;</code></pre>\n","signatures":[{"params":[{"name":"p"}]}]}],"properties":[{"textRaw":"path.sep","name":"sep","desc":"<p>The platform-specific file separator. <code>&apos;\\\\&apos;</code> or <code>&apos;/&apos;</code>.\n\n</p>\n<p>An example on linux:\n\n</p>\n<pre><code>&apos;foo/bar/baz&apos;.split(path.sep)\n// returns\n[&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]</code></pre>\n<p>An example on windows:\n\n</p>\n<pre><code>&apos;foo\\\\bar\\\\baz&apos;.split(path.sep)\n// returns\n[&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]</code></pre>\n"}],"type":"module","displayName":"Path"}]}